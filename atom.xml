<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Wei715547.github.io</id>
    <title>Wei: Development technology accumulation</title>
    <updated>2020-07-30T09:15:36.095Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Wei715547.github.io"/>
    <link rel="self" href="https://Wei715547.github.io/atom.xml"/>
    <subtitle>年月增长，我宜强盛。
用于Unity+开发的技术积累</subtitle>
    <logo>https://Wei715547.github.io/images/avatar.png</logo>
    <icon>https://Wei715547.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Wei: Development technology accumulation</rights>
    <entry>
        <title type="html"><![CDATA[Winform-Socket客户端]]></title>
        <id>https://Wei715547.github.io/post/winform-socket-ke-hu-duan/</id>
        <link href="https://Wei715547.github.io/post/winform-socket-ke-hu-duan/">
        </link>
        <updated>2020-07-30T09:06:19.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://Wei715547.github.io/post-images/1596100018787.PNG" alt="" loading="lazy"><br>
using System;<br>
using System.Collections.Generic;<br>
using System.ComponentModel;<br>
using System.Data;<br>
using System.Drawing;<br>
using System.Linq;<br>
using System.Net;<br>
using System.Net.Sockets;<br>
using System.Text;<br>
using System.Threading;<br>
using System.Threading.Tasks;<br>
using System.Windows.Forms;</p>
<p>namespace Socket客户端<br>
{<br>
public partial class Form1 : Form<br>
{<br>
public Form1()<br>
{<br>
InitializeComponent();<br>
}<br>
Socket socketSend;//负责通信的Socket<br>
/// <summary><br>
/// 连接服务器按钮<br>
/// </summary><br>
/// <param name="sender"></param><br>
/// <param name="e"></param><br>
private void btn_Cont_Click(object sender, EventArgs e)<br>
{<br>
try<br>
{<br>
//创建负责通信的Socket<br>
socketSend = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);<br>
//获取远程要连接的服务器的IP地址以及端口号<br>
IPAddress ipaddress = IPAddress.Parse(textIP.Text);//可以将一个字符串的IP地址转化为IPaddress的对象<br>
EndPoint point = new IPEndPoint(ipaddress, Convert.ToInt32(textPort.Text));//(ip地址，字符转端口号方法)<br>
//连接服务器<br>
socketSend.Connect(point);<br>
ShowMsg(&quot;连接成功&quot;);<br>
//开启一个子线程接收服务器发来的消息<br>
Thread th = new Thread(Receive);<br>
th.IsBackground = true;<br>
th.Start();<br>
}catch<br>
{ }</p>
<pre><code>    }
    /// &lt;summary&gt;
    /// 不停接收服务器发来的消息
    /// &lt;/summary&gt;
    private void Receive()
    {
        try
        {
            while (true)
            {
                byte[] buffer = new byte[1023 * 1023 * 2];
                int r = socketSend.Receive(buffer);
                if (r == 0)
                    break;
                string str = Encoding.UTF8.GetString(buffer, 0, r);
                ShowMsg(socketSend.RemoteEndPoint + &quot;:&quot; + str);

            }
        }
        catch
        { }
    }

    private void ShowMsg(string str)
    {
        textLog.AppendText(str + &quot;\r\n&quot;);
    }

    /// &lt;summary&gt;
    /// 客户端向服务器发送消息
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;sender&quot;&gt;&lt;/param&gt;
    /// &lt;param name=&quot;e&quot;&gt;&lt;/param&gt;
    private void btn_Send_Click(object sender, EventArgs e)
    {
        string str = textMsg.Text.Trim();
        byte[] date = Encoding.UTF8.GetBytes(str);
        socketSend.Send(date);
    }

    private void Form1_Load(object sender, EventArgs e)
    {
        Control.CheckForIllegalCrossThreadCalls = false;
    }
}
</code></pre>
<p>}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Winform-Socket服务器]]></title>
        <id>https://Wei715547.github.io/post/winform-socket-fu-wu-qi/</id>
        <link href="https://Wei715547.github.io/post/winform-socket-fu-wu-qi/">
        </link>
        <updated>2020-07-30T09:02:08.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://Wei715547.github.io/post-images/1596099971910.PNG" alt="" loading="lazy"><br>
using System;<br>
using System.Collections.Generic;<br>
using System.ComponentModel;<br>
using System.Data;<br>
using System.Drawing;<br>
using System.Linq;<br>
using System.Net;<br>
using System.Net.Sockets;<br>
using System.Text;<br>
using System.Threading;<br>
using System.Threading.Tasks;<br>
using System.Windows.Forms;</p>
<p>namespace Socket服务端<br>
{<br>
public partial class Form1 : Form<br>
{<br>
public Form1()<br>
{<br>
InitializeComponent();<br>
}</p>
<pre><code>    //存储客户端IP与Socket的键值对集合
    Dictionary&lt;string, Socket&gt; dicSocket = new Dictionary&lt;string, Socket&gt;();
    /// &lt;summary&gt;
    /// 开始监听按钮
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;sender&quot;&gt;&lt;/param&gt;
    /// &lt;param name=&quot;e&quot;&gt;&lt;/param&gt;
    private void button1_Click(object sender, EventArgs e)
    {
        try
        {
            //1.创建一个监听的Socket
            Socket socketWatch = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            
            //2.创建IP地址和端口号对象
            IPAddress ip = IPAddress./*Any;//*/Parse(textIP.Text);
            IPEndPoint point = new IPEndPoint(ip, Convert.ToInt32(textPort.Text));
            
            //3.让负责监听的Socket绑定IP以及端口号
            socketWatch.Bind(point);
            ShowMdg(&quot;监听成功&quot;);
            
            //4.监听队列
            socketWatch.Listen(10);
            
            //5.创建负责监听的Socket,来接受客户端的连接， 创建与客户端通信的Socket (需要在子线程中循环执行)
            Thread th = new Thread(Listen);
            th.IsBackground = true;
            th.Start(socketWatch);
        }
        catch
        { }

    }
    /// &lt;summary&gt;
    ///监听方法
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;o&quot;&gt;主进程中创建的负责监听的Socket以object形式传入&lt;/param&gt;
    private void Listen(object o)
    {
        //转为Socket类的对象(里式转换)
        Socket socketWatch = o as Socket;
        while (true)//循环监听客户端的接入，为其创建负责与之通信的Socket对象，并以IP,Socket对象的键值对形式将其加入列表
        {
            try
            {
                Socket socketSend = socketWatch.Accept();//5.次方法会一直等待客户端进行连接需在子线程中执行
                dicSocket.Add(socketSend.RemoteEndPoint.ToString(), socketSend);//客户端连接到服务器时将其IP地址与负责通信的Socket存入字典集合
                //将远程客户端的IP地址端口号存到下拉菜单中
                comboBox1.Items.Add(socketSend.RemoteEndPoint.ToString());
                ShowMdg(socketSend.RemoteEndPoint.ToString() + &quot;连接成功&quot;);//显示远程客户端及端口号

                //6.客户端连接成功后，服务器接收客户端发来的消息 (子线程中循环执行)
                Thread th = new Thread(Receive);
                th.IsBackground = true;
                th.Start(socketSend);
            }catch
            { }
        }
    }
    /// &lt;summary&gt;
    /// 服务器端不停接收客户端发来的消息
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;o&quot;&gt;子线程中创建的负责与此客户端收发数据的Socket对象&lt;/param&gt;
    private void Receive(object o)
    {
        Socket socketSend = o as Socket;
        while (true)//不断接受客户端发来的消息
        {
            try
            {
                byte[] date = new byte[1024 * 1024 * 2];//字节数组容器：接收发来的消息
                int r = socketSend.Receive(date);
                if (r == 0)//客户端退出收到的字节数为0时结束循环，不再接收此客户端消息
                    break;
                string s = Encoding.UTF8.GetString(date, 0, r);
                ShowMdg(socketSend.RemoteEndPoint.ToString() + &quot;:&quot; + s);
            }
            catch
            { }//为空：出现异常时不进行反馈
        }
    }

    private void ShowMdg(string date)
    {
        textLog.AppendText(date + &quot;\r\n&quot;);
    }

    private void Form1_Load(object sender, EventArgs e)
    {
        Control.CheckForIllegalCrossThreadCalls=false;//取消跨线程检测
    }
    /// &lt;summary&gt;
    /// 服务器向客户端发送消息
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;sender&quot;&gt;&lt;/param&gt;
    /// &lt;param name=&quot;e&quot;&gt;&lt;/param&gt;
    private void btn_Send_Click(object sender, EventArgs e)
    {
        string message = textMsg.Text;//向客户端传输的信息
        byte[] data = Encoding.UTF8.GetBytes(message);//对一个字符串做编码，转为字节数组
        //获取用户在下拉菜单中选中的IP地址(服务器给指定客户端发送消息)
        string ip = comboBox1.SelectedItem.ToString();
        dicSocket[ip].Send(data);

        //向每个客户端发送消息
        /*foreach (KeyValuePair&lt;string ,Socket&gt; soc in dicSocket)
        {
            soc.Value.Send(data);
        }*/
    }
}
</code></pre>
<p>}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Winform控件]]></title>
        <id>https://Wei715547.github.io/post/winform-kong-jian/</id>
        <link href="https://Wei715547.github.io/post/winform-kong-jian/">
        </link>
        <updated>2020-07-28T02:03:35.000Z</updated>
        <content type="html"><![CDATA[<p>控件：<br>
1.属性：Name--后台获取前台对象，需要使用的属性。<br>
visible--是否显示控件<br>
Enable--是否可用控件<br>
2.事件: 注册事件<br>
触发事件<br>
3.在Program-Main函数中创建的窗口为主窗口程序，次窗口关闭时整个应用程序庀</p>
<pre><code>5.TextBox控件 WordWrap:指示文本框是否换行
                        PasswordChar:文本框输入时显示固定字符
                        SoocllBar:是否显示滚动条
                        事件：TextChange:文本框内容发生改变时调用方法
6.Timer 事件：Enable默认为False,启用更改为True; Tick:每隔固定时间调用方法

7.RadioButton：多选按钮--存在多个时只可选一个，使用GroupBox分组可选择多个

8.MenuStrip：菜单栏（多组按钮）
MDI窗口设计：主窗体MDI属性设置为True，
                        子窗体  from.MdiParent(from1);-设置父窗体。
                        子窗体排列：在主窗体方法中调用--LayoutMdi(MdiLayout.TileHorizontal);(横向排列）
                        LayoutMdi(MdiLayout.TileVertical);(纵向排列）
9.ListBox：listBox1.Items.Add()--列表项，listBox1.SelectedIndex--当前所选中列表中项目的索引
事件:
    private void listBox1_DoubleClick(object sender, EventArgs e)
    {
        SoundPlayer sp = new SoundPlayer();//多媒体音乐播放器类
        sp.SoundLocation = musicFullPath[listBox1.SelectedIndex];//音乐文件的全路径
        sp.Play();
    }
10.打开文件：private void btn_Openfile_Click(object sender, EventArgs e)
    {
        OpenFileDialog opf = new OpenFileDialog();
        opf.Title = &quot;请选择文件&quot;;
        opf.InitialDirectory = @&quot;C:\Users\qweasd\Music&quot;;
        opf.Multiselect = true;
        opf.Filter = &quot;音乐文件|*.wav|所有文件|*.*;&quot;;
        opf.ShowDialog();
        //获得在该文件夹下选择的所有文件的全路径
        string[] musicFiles = opf.FileNames;
        for (int i = 0; i &lt; musicFiles.Length; i++)
        {
            listBox1.Items.Add(Path.GetFileName(musicFiles[i]));//从全路径中截取文件名方法，将文件名显示在ListBox中
            musicFullPath.Add(musicFiles[i]);//所有选中音乐的全文件路径列表
        }

    }

Winform线程：窗体加载时不开启跨线程检测
private void Form1_Load(object sender, EventArgs e)
    {
        //允许不同线程间进行数据访问
        Control.CheckForIllegalCrossThreadCalls = false;
    }

    private void Form1_FormClosing(object sender, FormClosingEventArgs e)
    {
        if(th!=null)
        {
            //子线程不为空时，随主线程关闭同时关闭子线程
            th.Abort();
        }
    }

Thread th = new Thread(StartRun);//此线程执行的方法/或传入委托/表达式
th.IsBackground = true;//后台运行
th.Start();//方法需要传递参数时可写在Start中“objecr”参数在方法中转为子类对象
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MD5加密]]></title>
        <id>https://Wei715547.github.io/post/md5-jia-mi/</id>
        <link href="https://Wei715547.github.io/post/md5-jia-mi/">
        </link>
        <updated>2020-07-27T08:52:16.000Z</updated>
        <content type="html"><![CDATA[<p>class Program<br>
{<br>
static void Main(string[] args)<br>
{<br>
Console.WriteLine(GetMd5(&quot;123&quot;));<br>
//202cb962ac5975b964b7152d234b70<br>
}</p>
<pre><code>    public static string GetMd5(string str)
    {
        MD5 md5 = MD5.Create();
        byte[] strbf = Encoding.Default.GetBytes(str);
        byte[] md5bf = md5.ComputeHash(strbf);
        //字节数组--字符串
        //1.按照编码格式解析
        //2.ToString()
        //3.将数组元素的每个元素ToString();
        //return Encoding.Default.GetString(md5bf);
        string strec = &quot;&quot;;
        for (int i = 0; i &lt; md5bf.Length; i++)
        {
            strec += md5bf[i].ToString (&quot;x&quot;);//默认10进制&quot;x&quot;:十六进制

        }
        return strec;
    }
}</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[简单工厂设计模式]]></title>
        <id>https://Wei715547.github.io/post/jian-dan-gong-han-she-ji-mo-shi/</id>
        <link href="https://Wei715547.github.io/post/jian-dan-gong-han-she-ji-mo-shi/">
        </link>
        <updated>2020-07-24T14:46:10.000Z</updated>
        <content type="html"><![CDATA[<p>using System;</p>
<p>namespace 简单工厂设计模式//（抽象类实现的多态）<br>
{<br>
class Program<br>
{<br>
static void Main(string[] args)<br>
{<br>
string brand = Console.ReadLine();<br>
NoteBook cosm = GetNoteBook(brand);<br>
cosm.Say();<br>
}</p>
<pre><code>    public static NoteBook GetNoteBook(string brand)
    {
        NoteBook nb = null;
        switch(brand)
        {
            case &quot;Lenovo&quot;:nb = new Lenovo();
                break;
            case &quot;Acre&quot;:nb = new Acre();
                break;
            case &quot;IBM&quot;:nb = new IBM();
                break;
        }
        return nb;
    }

    public abstract class NoteBook
    {
        public abstract void Say();
    }

    public class Lenovo : NoteBook
    {
        public override void Say()
        {
            Console.WriteLine(&quot;Lenovo&quot;);
        }
    }

    public class Acre:NoteBook
    {
        public override void Say()
        {
            Console.WriteLine(&quot;Acre&quot;);
        }
    }

    public class IBM:NoteBook
    {
        public override void Say()
        {
            Console.WriteLine(&quot;IBM&quot;);
        }
    }
}
</code></pre>
<p>}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[访问修饰符]]></title>
        <id>https://Wei715547.github.io/post/fang-wen-xiu-shi-fu/</id>
        <link href="https://Wei715547.github.io/post/fang-wen-xiu-shi-fu/">
        </link>
        <updated>2020-07-24T14:20:12.000Z</updated>
        <content type="html"><![CDATA[<p>public: 公开访问<br>
private:私有的，只能在当前类中访问<br>
protected:受保护的，只能在当前类或其子类中访问<br>
internal:只能在当前程序集/项目中访问，在同一项目中internal与public权限相同<br>
protected innternal:  protected + innternal</p>
<p>1.可以修饰类的只有：public，internal [1.(partial):部分类-多个人需要写同一个类时使用每个人完成类的一部分。2.sealed:密封类，此类不可被继承但可继承的类。<br>
2.子类的访问权限不能高于父类的访问权限，会暴露父类成员<br>
例：在程序集外会通过子类访问到子类所继承的父类成员！<br>
internal class Person<br>
{</p>
<pre><code>    }

    public class Student : Person
    {

    }
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[里式转换-类多态]]></title>
        <id>https://Wei715547.github.io/post/li-shi-zhuan-huan-lei-duo-tai/</id>
        <link href="https://Wei715547.github.io/post/li-shi-zhuan-huan-lei-duo-tai/">
        </link>
        <updated>2020-07-21T10:40:38.000Z</updated>
        <content type="html"><![CDATA[<p>class Program<br>
{<br>
public class Per<br>
{<br>
public void Say()<br>
{<br>
Console.WriteLine(&quot;Per&quot;);<br>
}<br>
}<br>
public class PerSOne:Per<br>
{<br>
public void Say()<br>
{<br>
Console.WriteLine(&quot;PerSOne&quot;);<br>
}<br>
}<br>
public class PerSTwo:Per<br>
{<br>
public void Say()<br>
{<br>
Console.WriteLine(&quot;PerSTwo&quot;);<br>
}<br>
}</p>
<pre><code>    static void Main(string[] args)
    {
        //里式转换-类多态
        Per[] per = new Per[3];
        Random r = new Random();
        int rs = 0;
        for (int i = 0; i &lt; per.Length; i++)
        {
            rs = r.Next(0, 2);
            switch(rs)
            {
                case 0:per[i] = new PerSOne();
                    break;
                case 1:per[i] = new PerSTwo();
                    break;
            }
        }

        for (int i = 0; i &lt; per.Length; i++)
        {
            if (per[i] is PerSOne)
            {
                ((PerSOne)per[i]).Say();
            }
            else if (per[i] is PerSTwo)
            {
                ((PerSTwo)per[i]).Say();
            }
            else
                per[i].Say();
            
        }

        Console.ReadKey();

    }</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[解决Hash冲突的方式]]></title>
        <id>https://Wei715547.github.io/post/jie-jue-hash-chong-tu-de-fang-shi/</id>
        <link href="https://Wei715547.github.io/post/jie-jue-hash-chong-tu-de-fang-shi/">
        </link>
        <updated>2020-07-13T15:17:48.000Z</updated>
        <content type="html"><![CDATA[<p>//解决冲突的方式</p>
<p>//1.桶式散列法<br>
//在数组列表中存储数组列表<br>
//一个键(主容器数组列表索引)可存储多个值(数组列表内的“数组列表的多个值“)<br>
class BucketHash<br>
{</p>
<pre><code>    private const int SIZE = 101;
    ArrayList[] date;

    public BucketHash()
    {
        date = new ArrayList[SIZE];
        for (int i = 0; i &lt; SIZE; i++)
        {
            date[i] = new ArrayList(4);
        }
    }

    public int Hash(string s)
    {
        long key = 0;
        char[] cname = s.ToCharArray();
        for (int i = 0; i &lt; cname.Length; i++)
        {
            key += 37 * key + (int)cname[i];
        }
        key = key % date.GetUpperBound(0);
        if (key &lt; 0)
            key += date.GetUpperBound(0);
        return (int)key;
    }

    public void Insert(string s)
    {
        int hash_key = Hash(s);
        if (!date[hash_key].Contains(s))
            date[hash_key].Add(s);

    }

    public void Remove(string s)
    {
        int hash_key = Hash(s);
        if (date[hash_key].Contains(s))
            date[hash_key].Remove(s);
    }

    public void ShowTable()
    {
        for (int i = 0; i &lt; date.Length; i++)
        {
            if (date[i].Count&gt;0)
            {
                Console.Write(i+&quot;:&quot;);
                foreach (string s in date[i])
                {
                    Console.Write(s);
                }
                Console.WriteLine();
            }
                
        }
    }
}
</code></pre>
<p>}<br>
//示例程序<br>
class Program<br>
{<br>
static void Main(string[] args)<br>
{<br>
//桶式散列法<br>
BucketHash bkHash = new BucketHash();<br>
for (int i = 0; i &lt; someName .Length; i++)<br>
{<br>
bkHash.Insert(someName[i]);<br>
}<br>
bkHash.ShowTable();</p>
<pre><code>    }

//2.开放地址法
//发生冲突时，寻找下一个空的散列地址（平方探测直至找到下一个空位置）

//多重散列
//存在多种哈希函数，发生冲突时调用备选哈希函数
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[散列表HashTable]]></title>
        <id>https://Wei715547.github.io/post/san-lie-biao-hashtable/</id>
        <link href="https://Wei715547.github.io/post/san-lie-biao-hashtable/">
        </link>
        <updated>2020-07-13T15:15:58.000Z</updated>
        <content type="html"><![CDATA[<p>namespace Hash<br>
{<br>
class Program<br>
{<br>
static void Main(string[] args)<br>
{<br>
string[] hashTable = new string[10007];//数组长度使用素数<br>
string name;<br>
string[] someName = new string[] { &quot;Wei&quot;, &quot;WDQWAS&quot;, &quot;QWCQCQ&quot;, &quot;WeCQSCi3&quot;, &quot;QWC&quot;, &quot;SCZ&quot;, &quot;VDBC&quot;, &quot;XCDF&quot;, &quot;XSDXDS&quot;, &quot;Wei9&quot; };</p>
<pre><code>        int hashKey;
        for (int i = 0; i &lt; someName .Length; i++)
        {
            name = someName[i];
            hashKey = BatterHashMathf(name, hashTable);
            hashTable[hashKey] = name;
        }
        ShowTable(hashTable);

        Console.WriteLine(InHash(&quot;Wei&quot;,hashTable));
        Console.WriteLine(GetKey (&quot;Wei&quot;,hashTable));

    }

    public static int HashMathf(string s,string [] table)
    {
        int key = 0;
        char[] cname = s.ToCharArray();
        for (int i = 0; i &lt;cname .Length; i++)
        {
            key += (int)cname[i];
        }
        return key % table.GetUpperBound(0);
    }

    //解决冲突的方式
    //桶式散列法
    //开放地址法
    //双重散列法
    public static int BatterHashMathf(string s,string[] arr)
    {
        long key = 0;
        char[] cname = s.ToCharArray();
        for (int i = 0; i &lt; cname.Length; i++)
        {
            key += 37*key+(int)cname[i];
        }
        key = key % arr.GetUpperBound(0);
        if (key &lt; 0)
            key += arr.GetUpperBound(0);
        return (int)key;
    }

    public static void ShowTable(string [] arr)
    {
        for (int i = 0; i &lt; arr.Length; i++)
        {
            if (arr[i]!=null)
                Console.WriteLine(i+&quot;:&quot;+arr[i]);
        }
    }

    public static bool InHash(string s,string []arr)
    {
        int hashKey = BatterHashMathf(s, arr);
        if (arr[hashKey].Equals(s))
        {
            return true;
        }else
        {
            return false;
        }
    }

    public static int GetKey(string s,string []arr)
    {
        if (InHash(s, arr))
            return BatterHashMathf(s, arr);
        else
            return -1;
    }

}
</code></pre>
<p>}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[构建字典集合]]></title>
        <id>https://Wei715547.github.io/post/gou-jian-zi-dian-ji-he/</id>
        <link href="https://Wei715547.github.io/post/gou-jian-zi-dian-ji-he/">
        </link>
        <updated>2020-07-13T13:32:28.000Z</updated>
        <content type="html"><![CDATA[<p>using System.Collections;<br>
namespace MyDictionary<br>
{//字典集合类<br>
class IDic:DictionaryBase<br>
{<br>
public IDic()<br>
{</p>
<pre><code>    }
    public void Add(string name,string IP)
    {
        base.InnerHashtable[name] = IP;
    }

    public string Item(string name)
    {
        return base.InnerHashtable[name].ToString();
    }

    public void Remove(string name)
    {
        base.InnerHashtable.Remove(name);
    }

}
</code></pre>
<p>}<br>
//示例程序<br>
class Program<br>
{<br>
static void Main(string[] args)<br>
{<br>
IDic IPDic = new IDic();<br>
IPDic.Add(&quot;Wei&quot;, &quot;715547&quot;);<br>
IPDic.Add(&quot;Wei02&quot;, &quot;715548&quot;);<br>
IPDic.Add(&quot;Wei03&quot;, &quot;715549&quot;);</p>
<pre><code>        Console.WriteLine(IPDic.Item(&quot;Wei&quot;));

        DictionaryEntry[] ips = new DictionaryEntry[IPDic.Count];

        IPDic.CopyTo(ips,0);
        for (int i = 0; i &lt;= ips.GetUpperBound(0); i++)
        {
            Console.WriteLine(ips[i].Key+&quot;:&quot;+ips[i].Value);
        }


    }
}</code></pre>
]]></content>
    </entry>
</feed>