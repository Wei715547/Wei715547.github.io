<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Wei715547.github.io</id>
    <title>WeiBlog</title>
    <updated>2021-05-17T10:46:55.194Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Wei715547.github.io"/>
    <link rel="self" href="https://Wei715547.github.io/atom.xml"/>
    <subtitle>年月增长，我宜强盛。
用于Unity+开发的技术积累</subtitle>
    <logo>https://Wei715547.github.io/images/avatar.png</logo>
    <icon>https://Wei715547.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, WeiBlog</rights>
    <entry>
        <title type="html"><![CDATA[Unity-Android简易交互]]></title>
        <id>https://Wei715547.github.io/post/unity-android-jian-yi-jiao-hu/</id>
        <link href="https://Wei715547.github.io/post/unity-android-jian-yi-jiao-hu/">
        </link>
        <updated>2021-05-16T11:05:17.000Z</updated>
        <content type="html"><![CDATA[<p>#1.在AS中新建Empty Activity工程<br>
<img src="https://Wei715547.github.io/post-images/1621226119337.PNG" alt="" loading="lazy"><br>
#2.在Android视图下选中app右键选中Module，创建新的 Android Library<br>
<img src="https://Wei715547.github.io/post-images/1621226388190.PNG" alt="" loading="lazy"><br>
<img src="https://Wei715547.github.io/post-images/1621226399526.PNG" alt="" loading="lazy"><br>
<img src="https://Wei715547.github.io/post-images/1621226915813.PNG" alt="" loading="lazy"><br>
后续只对mysdk模块进行操作。<br>
#3、引入Unity对接Android的库文件<br>
导入classes.jar文件：<br>
2018版本中路径为：C:\Program Files\Unity\Editor\Data\PlaybackEngines\AndroidPlayer\Variations\mono\Development\Classes\classes.jar<br>
将classes.jar粘贴到mysdk模块的libs目录下**（需要将工程切换到project视图）**<br>
<img src="https://Wei715547.github.io/post-images/1621227156448.png" alt="" loading="lazy"><br>
这个classes.jar文件就被引入到工程后，展开三角，可以看到如下三个模块，其中就有com.unity3d.player。<br>
<img src="https://Wei715547.github.io/post-images/1621227294564.PNG" alt="" loading="lazy"></p>
<h1 id="4-创建本模块的activity文件">4、创建本模块的Activity文件</h1>
<p>展开mysdk模块下的src目录，选中com.***.mysdk，然后右键，新建一个Activity，选择Empty Activity，输入Activity Name以及Package Name和Language，勾掉Generate Layout File, 完成。<br>
<img src="https://Wei715547.github.io/post-images/1621227391165.PNG" alt="" loading="lazy"><br>
<img src="https://Wei715547.github.io/post-images/1621227460448.PNG" alt="" loading="lazy"><br>
脚本初始为：<br>
<code><br>
package com.example.mysdk;</p>
<p>import android.os.Bundle;</p>
<p>import androidx.appcompat.app.AppCompatActivity;</p>
<p>public class PrMainActivity extends AppCompatActivity {</p>
<pre><code>@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
}
</code></pre>
<p>}<br>
</code><br>
现将SDKMainActivity脚本内容修改为继续自UnityPlayerActivity ，并添加两个方法 UnityCallAndroid 和 AndroidCallUnity，<br>
<code><br>
package com.example.mysdk;</p>
<p>import android.os.Bundle;<br>
import android.widget.Toast;</p>
<p>import com.unity3d.player.UnityPlayer;<br>
import com.unity3d.player.UnityPlayerActivity;</p>
<p>public class SDKMainActivity extends UnityPlayerActivity {</p>
<pre><code>@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
}

//unity调用Android
public void UnityCallAndroid () {

    Toast.makeText(this,&quot;unity调用android成功&quot;, Toast.LENGTH_LONG).show();

    AndroidCallUnity();
}

//android调用unity
public void AndroidCallUnity () {

    //第1个参数为Unity场景中用于接收android消息的对象名称
    //第2个参数为对象上的脚本的一个成员方法名称（脚本名称不限制）
    //第3个参数为unity方法的参数
    UnityPlayer.UnitySendMessage(&quot;receiveObj&quot;, &quot;UnityMethod&quot;, &quot;This is args.&quot;);
}
</code></pre>
<p>}<br>
</code><br>
#5、将模块打包<br>
打包方法有两种。</p>
<p>一是手动进行构建，然后在Build/intermediates/packaged-classes/release目录下找到相应的jar包（这个jar包默认名称为classes.jar，为了区分，需要自己改名称）；</p>
<p>二是用gradle命令。<br>
<img src="https://Wei715547.github.io/post-images/1621227877786.PNG" alt="" loading="lazy"><br>
打开本模块的build.gradle文件，在文件尾添加如下的一组命令。<br>
<code><br>
//----------------这是一组将module导出为jar的gradle命令-------------------<br>
// mysdk为自定义的jar包名称<br>
//task to delete the old jar<br>
task deleteOldJar(type: Delete) {<br>
delete 'release/mysdk.jar'<br>
}</p>
<p>//task to export contents as jar<br>
task exportJar(type: Copy) {<br>
from('build/intermediates/packaged-classes/release/')<br>
into('release/')<br>
include('classes.jar')<br>
///Rename the jar<br>
rename('classes.jar', 'mysdk.jar')<br>
}</p>
<p>exportJar.dependsOn(deleteOldJar, build)<br>
//---------------------------命令结束------------------------------<br>
</code><br>
build.gradle文件修改后，会提示要求同步，直接同步即可。同步结束，在IDE右上点开Gradle窗口，在other下找到exportJar命令。在mysdk/release/目录下得到生成的jar包。<br>
<img src="https://Wei715547.github.io/post-images/1621227995616.PNG" alt="" loading="lazy"><br>
<img src="https://Wei715547.github.io/post-images/1621228090667.PNG" alt="" loading="lazy"><br>
#6、修改AndroidManifest.xml文件<br>
<img src="https://Wei715547.github.io/post-images/1621228177215.PNG" alt="" loading="lazy"><br>
文件初始只有一对application标签和activity标签<br>
修改为：<br>
<code></p>
<?xml version="1.0" encoding="utf-8"?>
<p><manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.letui.mysdk"></p>
<pre><code>&lt;application android:label=&quot;MySDK&quot;&gt;
    &lt;activity android:name=&quot;com.example.mysdk.PrMainActivity&quot;&gt;&lt;/activity&gt;
    &lt;!-- 这个android:name的值必须为包名+类名 --&gt;
    &lt;activity android:name=&quot;com.example.mysdk.SDKMainActivity&quot;&gt;
        &lt;intent-filter&gt;
            &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;

            &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;
        &lt;/intent-filter&gt;

        &lt;!-- 这一行不能少，否则会闪退 --&gt;
        &lt;meta-data
            android:name=&quot;unityplayer.UnityActivity&quot;
            android:value=&quot;true&quot; /&gt;
    &lt;/activity&gt;
&lt;/application&gt;
</code></pre>
</manifest>
</code>
<p>#在unity中使用jar文件<br>
新建一个Unity工程，在Assets目录下新建Plugins/Android/bin目录。<br>
AndroidManifest.xml文件拷贝到Assets/Plugins/Android目录下<br>
mysdk.jar文件拷贝到Assets/Plugins/Android/bin目录下<br>
<img src="https://Wei715547.github.io/post-images/1621245851653.PNG" alt="" loading="lazy"><br>
#制作测试UI界面<br>
<img src="https://Wei715547.github.io/post-images/1621246006840.PNG" alt="" loading="lazy"><br>
<strong>receiveObj</strong>的名称必须与SDKMainActivity类的AndroidCallUnity方法中的UnityPlayer.UnitySendMessage方法的第一个参数保持一致。<br>
<img src="https://Wei715547.github.io/post-images/1621246926017.PNG" alt="" loading="lazy"><br>
创建SDKTest脚本挂载到receiveObj上<br>
<code><br>
using System.Collections;<br>
using System.Collections.Generic;<br>
using UnityEngine;<br>
using UnityEngine.UI;</p>
<p>public class SDKTest : MonoBehaviour<br>
{<br>
private AndroidJavaClass jc;<br>
private AndroidJavaObject jo;</p>
<pre><code>private Button btn;
private Text text;

private void Awake()
{
    btn = transform.Find(&quot;Button&quot;).GetComponent&lt;Button&gt;();
    text = transform.Find(&quot;Text&quot;).GetComponent&lt;Text&gt;();

    //这两行是固定写法
    jc = new AndroidJavaClass(&quot;com.unity3d.player.UnityPlayer&quot;);
    jo = jc.GetStatic&lt;AndroidJavaObject&gt;(&quot;currentActivity&quot;);

    btn.onClick.AddListener(OnBtnClickHandler);
}

private void OnBtnClickHandler()
{
    //调用Android中的方法UnityCallAndroid
    jo.Call(&quot;UnityCallAndroid&quot;);
}

/// &lt;summary&gt;
///  被Android中AndroidCallUnity调用
/// &lt;/summary&gt;
/// &lt;param name=&quot;str&quot;&gt;&lt;/param&gt;
public void UnityMethod(string str)
{
    Debug.Log(&quot;UnityMethod被调用，参数：&quot; + str);
    text.text = str;
}
</code></pre>
<p>}<br>
</code><br>
#打包并测试。<br>
<img src="https://Wei715547.github.io/post-images/1621247554063.jpg" alt="" loading="lazy"><br>
<img src="https://Wei715547.github.io/post-images/1621248382498.PNG" alt="" loading="lazy"><br>
<img src="https://Wei715547.github.io/post-images/1621248227474.PNG" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[插值曲线子弹]]></title>
        <id>https://Wei715547.github.io/post/cha-zhi-qu-xian-zi-dan/</id>
        <link href="https://Wei715547.github.io/post/cha-zhi-qu-xian-zi-dan/">
        </link>
        <updated>2021-05-12T13:37:27.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://Wei715547.github.io/post-images/1620828840969.PNG" alt="" loading="lazy"><br>
<a href = "https://www.bilibili.com/video/BV1kv411r7x2?p=5">视频</a><br>
<strong>子弹脚本</strong><br>
using System.Collections;<br>
using System.Collections.Generic;<br>
using UnityEngine;</p>
<p>public class FLProjectile : MonoBehaviour<br>
{<br>
[SerializeField]<br>
float speed = 10f;<br>
[SerializeField]<br>
float rotateSpeed = 0.5f;<br>
Vector2 dir;</p>
<pre><code>GameObject[] enemys;
[SerializeField]
Transform enemyPos;

TrailRenderer trail;
BoxCollider2D collider;
private void Awake()
{
    trail = GetComponentInChildren&lt;TrailRenderer&gt;();
    collider = GetComponent&lt;BoxCollider2D&gt;();
    collider.isTrigger = true;
}
private void OnEnable()
{
    enemys = GameObject.FindGameObjectsWithTag(&quot;Enemy&quot;);
    enemyPos = GetTargertEnemyPos();
    StartCoroutine(MoveDirectly());
}
private void OnDisable()
{
    trail.Clear();
}
Transform GetTargertEnemyPos()
{
    if (enemys.Length != 0)
        return enemys[Random.Range(0, enemys.Length)].transform;
    else return null;

}
//曲线移动
IEnumerator MoveDirectly()
{
    while (gameObject.activeSelf)
    {
        if (enemyPos != null)            
            transform.up = Vector3.Slerp(transform.up, enemyPos.position - transform.position,
                rotateSpeed / Vector2.Distance(this.transform.position, enemyPos.position));                            
        transform.position += transform.up * speed * Time.deltaTime;

        yield return null;            
    }
    
}
private void OnTriggerEnter2D(Collider2D collision)
{
    gameObject.SetActive(false);//协成依赖于mono的Update,物体禁用后协成也不再执行
}
</code></pre>
<p>}</p>
<p><strong>角色控制部分</strong><br>
private void Update()<br>
{<br>
if (power &gt;= 100)//能量达到100执行<br>
{<br>
StartCoroutine(nameof(StartRangeFire));<br>
power = 0;<br>
}<br>
}<br>
IEnumerator StartRangeFire()<br>
{<br>
StartCoroutine(nameof(RFire));//开启曲线子弹<br>
yield return new WaitForSeconds(RFireTime);//设定时间后<br>
StopCoroutine(nameof(RFire));//结束<br>
StartCoroutine(nameof(DesShiled));//护盾消失<br>
}<br>
IEnumerator RFire()<br>
{<br>
//判断护盾是否显示<br>
if (!shiled.gameObject.activeSelf)//未显示则，则显示护盾<br>
{<br>
shiled.material.SetColor(&quot;_FresnelColor&quot;, Color.red * 2.5f);<br>
shiled.gameObject.SetActive(true);<br>
shiled.gameObject.transform.DOScale(Vector3.one*100, 0.5f);<br>
}<br>
else//显示则改变护盾颜色<br>
shiled.material.SetColor(&quot;_FresnelColor&quot;, Color.red * 2.5f);</p>
<pre><code>    while (true)
    {
        PoolManager.Release(projectile4, pointR.position, pointR.rotation);
        PoolManager.Release(projectile4, pointR2.position, pointR2.rotation);
        yield return Rtime;
    }
}
//护盾消失
IEnumerator DesShiled()
{ 
    while (true)
    {
        t += Time.deltaTime;//rtime时间内r变为1
        shiled.material.SetFloat(&quot;_BurnAmount&quot;, t);
        yield return null;
        if(t&gt;1)
        {
            t = 0;
            break;
        }
        
    }
    shiled.gameObject.SetActive(false);
    shiled.material.SetFloat(&quot;_BurnAmount&quot;, 0);
    shiled.material.SetColor(&quot;_FresnelColor&quot;, shiledIdColor);
    shiled.gameObject.transform.localScale = Vector3.zero;
    StopCoroutine(nameof(DesShiled));
}</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[URP Post Processing/Base Shader]]></title>
        <id>https://Wei715547.github.io/post/urp-post-processing/</id>
        <link href="https://Wei715547.github.io/post/urp-post-processing/">
        </link>
        <updated>2021-05-10T06:46:34.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://Wei715547.github.io/post-images/1620629367082.PNG" alt="" loading="lazy"><br>
<img src="https://Wei715547.github.io/post-images/1620629450549.PNG" alt="" loading="lazy"></p>
<p><strong>URP中基础Shader</strong><br>
<img src="https://Wei715547.github.io/post-images/1620708581418.PNG" alt="" loading="lazy"><br>
Shader &quot;Unlit/URPTestShader&quot;<br>
{<br>
Properties<br>
{<br>
_BaseColor(&quot;BaseColor&quot;, Color) = (1,1,1,1)<br>
_MainTex (&quot;Texture&quot;, 2D) = &quot;white&quot; {}<br>
}<br>
SubShader<br>
{<br>
Tags { &quot;RenderType&quot;=&quot;Opaque&quot; &quot;RanderPipeline&quot; = &quot;UniversalPipeline&quot; }</p>
<pre><code>    Pass//URP单Pass前项渲染的管线
    {
		HLSLPROGRAM//使用HLSL语言
		#pragma vertex vert
        #pragma fragment frag
		#include &quot;Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl&quot;//引入URP核心文件
		
		sampler2D _MainTex;
        //float4 _MainTex_ST;
		//half4 _BaseColor;
		
		//兼容SRP属性
		CBUFFER_START(UnityPerMaterial)
			float4 _MainTex_ST;
			half4 _BaseColor;
		CBUFFER_END

		struct appdata
        {
            float4 vertex : POSITION;
            float2 uv : TEXCOORD0;
        };

        struct v2f
        {
            float2 uv : TEXCOORD0;
            float4 vertex : SV_POSITION;
        };

        v2f vert (appdata v)
        {
            v2f o;
            o.vertex = TransformObjectToHClip(v.vertex.xyz);//
            o.uv = TRANSFORM_TEX(v.uv, _MainTex);
            return o;
        }

        half4 frag (v2f i) : SV_Target//HLSL中不再使用fixed类型(精度低)
        {
            // sample the texture
            half4 col = tex2D(_MainTex, i.uv)*_BaseColor;
            return col;
        }
		ENDHLSL
    }
}
</code></pre>
<p>}<br>
<a href ="https://www.jianshu.com/p/3fef69e2efb6">内置管线Shader升级到URP详细手册</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Input System]]></title>
        <id>https://Wei715547.github.io/post/input-system/</id>
        <link href="https://Wei715547.github.io/post/input-system/">
        </link>
        <updated>2021-05-09T08:36:56.000Z</updated>
        <content type="html"><![CDATA[<p>#1.导入包<br>
<img src="https://Wei715547.github.io/post-images/1620550852403.PNG" alt="" loading="lazy"><br>
#2.创建Input Actions<br>
<img src="https://Wei715547.github.io/post-images/1620551006582.PNG" alt="" loading="lazy"><br>
#3.添加输入地图，绑定其中的数据类型及输入设备<br>
<img src="https://Wei715547.github.io/post-images/1620551266011.PNG" alt="" loading="lazy"><br>
#4.使用Input Actions生成C#代码<br>
<img src="https://Wei715547.github.io/post-images/1620551368934.PNG" alt="" loading="lazy"><br>
#5.创建Actions中的对应Action的可实例化回调接口<br>
如对应Move的PlayerInput<br>
using System;<br>
using System.Collections;<br>
using System.Collections.Generic;<br>
using UnityEngine;<br>
using UnityEngine.InputSystem;</p>
<p>[CreateAssetMenu(menuName = &quot;Player Input&quot;)]//可创建的实例化<br>
public class PlayerInput : ScriptableObject, InputActions.IGameplayActions//继承InputActions中对应输入地图的回调接口<br>
{<br>
public event Action<Vector2> onMove;<br>
public event Action onStopMove;</p>
<pre><code>InputActions inputActions;
private void OnEnable()//实例化输入，设置此为对应地图回调
{
    inputActions = new InputActions();
    inputActions.Gameplay.SetCallbacks(this);
}
private void OnDisable()//禁用输入
{
    DisableAllInputs();
}
public void DisableAllInputs()
{
    inputActions.Gameplay.Disable();
}

public void EnableGamePlayerInput()//外部启用方法
{
    inputActions.Gameplay.Enable();
    //启用时鼠标隐藏，锁定
    Cursor.visible = false;
    Cursor.lockState = CursorLockMode.Locked;
}
//实现回调接口方法
public void OnMove(InputAction.CallbackContext context)
{
    //根据输入，调用订阅对应事件的方法
    if (context.phase == InputActionPhase.Performed)//按键处于按下状态时
        onMove?.Invoke(context.ReadValue&lt;Vector2&gt;());

    if (context.phase == InputActionPhase.Canceled)//松开按键时
        onStopMove?.Invoke();
}
</code></pre>
<p>}<br>
#6.添加角色控制脚本，获取回调接口，订阅其中输入对应的事件，与实现逻辑<br>
<img src="https://Wei715547.github.io/post-images/1620552666059.PNG" alt="" loading="lazy"><br>
using System.Collections;<br>
using System.Collections.Generic;<br>
using UnityEngine;</p>
<p>[RequireComponent(typeof(Rigidbody2D))]//特性添加组件<br>
public class Player : MonoBehaviour<br>
{<br>
[SerializeField] PlayerInput input;//回调接口<br>
Rigidbody2D rig;<br>
[SerializeField] float moveSpeed = 10f;<br>
private void Awake()<br>
{<br>
rig = GetComponent<Rigidbody2D>();<br>
}<br>
private void OnEnable()<br>
{<br>
input.onMove += OnMove;<br>
input.onStopMove += OnStopMove;<br>
}<br>
// Start is called before the first frame update<br>
void Start()<br>
{<br>
rig.gravityScale = 0;<br>
input.EnableGamePlayerInput();//激活动作表<br>
}</p>
<pre><code>// Update is called once per frame
void Update()
{
    
}
private void OnMove(Vector2 dir)//根据输入实现逻辑
{
    //Vector2 moveAmount = dir * moveSpeed;
    rig.velocity = dir * moveSpeed;
}
private void OnStopMove()
{
    rig.velocity = Vector2.zero;
}
</code></pre>
<p>}<br>
#设置文件<br>
<img src="https://Wei715547.github.io/post-images/1620629585832.PNG" alt="" loading="lazy"></p>
<p>#添加新的Action:Fire<br>
<img src="https://Wei715547.github.io/post-images/1620661870528.PNG" alt="" loading="lazy"><br>
<strong>保存后@InputActions中更新IGameplayActions接口中的方法</strong><br>
<strong>之后实现PlayerInput继承的IGameplayActions中的方法</strong><br>
//实现回调接口方法<br>
public event Action onFire;<br>
public event Action stopFire;</p>
<pre><code>public void OnFire(InputAction.CallbackContext context)
{
    if (context.phase == InputActionPhase.Performed)//按键处于按下状态时
        onFire?.Invoke();

    if (context.phase == InputActionPhase.Canceled)//松开按键时
        stopFire?.Invoke();
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[水面Shader]]></title>
        <id>https://Wei715547.github.io/post/shui-mian-shader/</id>
        <link href="https://Wei715547.github.io/post/shui-mian-shader/">
        </link>
        <updated>2021-04-26T09:57:03.000Z</updated>
        <content type="html"><![CDATA[<p>#2D<br>
<img src="https://Wei715547.github.io/post-images/1619694485822.PNG" alt="" loading="lazy"><br>
Shader &quot;Unlit/Water&quot;<br>
{<br>
Properties<br>
{<br>
_ColorOpacity(&quot;Water Tint (RGB) &amp; Opacity (A)&quot;, 2D) = &quot;white&quot; {}<br>
_DistortionNormalMap(&quot;Normal Map&quot;, 2D) = &quot;bump&quot; {}<br>
_DistortionStrength(&quot;Distortion strength&quot;, Float) = 1.0<br>
}<br>
SubShader<br>
{<br>
Tags { &quot;RenderType&quot;=&quot;Opaque&quot; &quot;Queue&quot;=&quot;Transparent&quot; }<br>
LOD 100</p>
<pre><code>	// Grab the screen behind the object into _BackgroundTexture
	GrabPass
	{
		&quot;_BackgroundTexture&quot;
	}

	Pass
	{
		CGPROGRAM
		#pragma vertex vert
		#pragma fragment frag


		#include &quot;UnityCG.cginc&quot;

		struct appdata
		{
			float4 vertex : POSITION;
			float2 uv : TEXCOORD0;
			float2 uv2 : TEXCOORD1;
		};

		struct v2f
		{
			float2 uv : TEXCOORD0;
			float2 uv2 : TEXCOORD1;
			float4 grabPos : TEXCOORD2;
			float4 vertex : SV_POSITION;
		};

		sampler2D _BackgroundTexture;
		sampler2D _ColorOpacity;
		sampler2D _DistortionNormalMap;

		float _DistortionStrength;
		float4 _DistortionNormalMap_ST;
		float4 _BackgroundTexture_TexelSize;

		v2f vert (appdata v)
		{
			v2f o;
			o.vertex = UnityObjectToClipPos(v.vertex);
			o.grabPos = ComputeGrabScreenPos(o.vertex);//获取截取屏幕的采样坐标
</code></pre>
<p>#if !UNITY_UV_STARTS_AT_TOP<br>
if(_BackgroundTexture_TexelSize.y &lt; 0)<br>
o.grabPos.y = 1.0 - o.grabPos.y;<br>
#endif<br>
o.uv = v.uv;<br>
o.uv2 = v.uv2;</p>
<pre><code>			return o;
		}

		fixed4 frag (v2f i) : SV_Target
		{
			float2 properuv = _DistortionNormalMap_ST.zw + (i.uv2.xy * _DistortionNormalMap_ST.xy);

			float3 normal1 = UnpackNormal(tex2D(_DistortionNormalMap, properuv + _Time.y));
			float3 normal2 = UnpackNormal(tex2D(_DistortionNormalMap, (1.0f - properuv) + _Time.y));

			float3 norm = (normal1 + normal2) * 0.5f * _DistortionStrength;

			half4 coloropa = tex2D(_ColorOpacity, i.uv + norm.xy * 0.1f);

			half4 bgcolor = tex2Dproj(_BackgroundTexture, i.grabPos + float4(norm.x*0.5f, norm.y*0.5f, 0, 0));

			//col = lerp(col, float4(1, 1, 1, 1), step(0.98f, i.uv.y));

			bgcolor.rgb = lerp(bgcolor.rgb, coloropa.rgb, coloropa.a);
			bgcolor.rgb *= coloropa.rgb;

			return bgcolor;
			//return float4(i.uv2.x, i.uv2.y, 0, 1);
		}
		ENDCG
	}
}
</code></pre>
<p>}</p>
<p>#3D<br>
<img src="https://Wei715547.github.io/post-images/1619431100957.PNG" alt="" loading="lazy"><br>
Shader &quot;Unlit/Wave&quot;<br>
{<br>
Properties<br>
{<br>
_Color(&quot;MainColor&quot;, Color) = (1,1,1,1)<br>
_MainTex (&quot;Texture&quot;, 2D) = &quot;white&quot; {}<br>
_WaveMap(&quot;WaveMap&quot;,2D) = &quot;while&quot;{}<br>
_CubMap(&quot;CubMap&quot;,Cube) = &quot;_Skybox&quot;{}<br>
_WaveSpeedX(&quot;WaveSpeedX&quot;,Range(-0.1,0.1)) = 0.1<br>
_WaveSpeedY(&quot;WaveSpeedY&quot;,Range(-0.1,0.1)) = 0.1<br>
_Distortion(&quot;Distortion&quot;,Range(0,100)) = 10<br>
}<br>
SubShader<br>
{<br>
Tags {&quot;Queue&quot; = &quot;Transparent&quot; &quot;RenderType&quot;=&quot;Opaque&quot; }<br>
//GrabPass{&quot;_RefractionTex&quot;}<br>
Pass<br>
{<br>
CGPROGRAM</p>
<pre><code>		float4 _Color;
		sampler2D _MainTex;
        float4 _MainTex_ST;
		sampler2D _WaveMap;
		float4 _WaveMap_ST;
		samplerCUBE _CubMap;
		fixed _WaveSpeedX;
		fixed _WaveSpeedY;
		float _Distortion;
		//sampler2D _RefractionTex;
		//float4 _RefractionTex_ST;
		//float4 _RefractionTex_TexeSize;

        #pragma vertex vert
        #pragma fragment frag

        #include &quot;UnityCG.cginc&quot;
		#include &quot;AutoLight.cginc&quot;

        struct a2v
        {
            float4 vertex : POSITION;
            float2 texcoord : TEXCOORD0;
			float4 normal :NORMAL;
			float4 tangent :TANGENT;
        };

        struct v2f
        {                
            float4 pos : SV_POSITION;
			float4 scrPos : TEXCOORD0;
			float4 uv : TEXCOORD1;
			float4 TtoW0 :TEXCOORD2;
			float4 TtoW1 :TEXCOORD3;
			float4 TtoW2 : TEXCOORD4;
			SHADOW_COORDS(5)
        };
        

        v2f vert (a2v v)
        {
            v2f o;
            o.pos = UnityObjectToClipPos(v.vertex);
			o.scrPos = ComputeGrabScreenPos(o.pos);

			o.uv.xy = TRANSFORM_TEX(v.texcoord,_MainTex);
			o.uv.zw = TRANSFORM_TEX(v.texcoord,_WaveMap);

			float3 worldPos = mul(unity_ObjectToWorld,v.vertex);
			float3 worldNormal = UnityObjectToWorldNormal(v.normal);
			float3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
			float3 worldBinormal = cross(worldNormal,worldTangent)*v.tangent.w;

			o.TtoW0 = float4 (worldTangent.x,worldBinormal.x,worldNormal.x,worldPos.x);
			o.TtoW1 = float4 (worldTangent.y,worldBinormal.y,worldNormal.y,worldPos.y);
			o.TtoW2 = float4 (worldTangent.z,worldBinormal.z,worldNormal.z,worldPos.z);
			TRANSFER_SHADOW(o);
            return o;
        }

        fixed4 frag (v2f i) : SV_Target
        {
            float3 worldPos = float3(i.TtoW0.w,i.TtoW1.w,i.TtoW2.w);
			fixed3 viewDir = normalize(UnityWorldSpaceViewDir(worldPos));
			float2 speed = _Time.y*float2(_WaveSpeedX,_WaveSpeedY);

			fixed3 bump1 = UnpackNormal(tex2D(_WaveMap,i.uv.zw+speed)).rgb;
			fixed3 bump2 = UnpackNormal(tex2D(_WaveMap,i.uv.zw-speed)).rgb;
			fixed3 bump = normalize(bump1+bump2);

			float2 offset = bump.xy*_Distortion;//*_RefractionTex_TexeSize.xy;
			i.scrPos.xy = offset*i.scrPos.z + i.scrPos.xy;
			//fixed3 refrCol = tex2D(_RefractionTex,i.scrPos.xy/i.scrPos.w).rgb;

			bump = normalize(half3(dot(i.TtoW0.xyz,bump),dot(i.TtoW1.xyz,bump),dot(i.TtoW2.xyz,bump)));
			fixed4 texColor = tex2D(_MainTex,i.uv.xy+speed);
			fixed3 refDir = reflect(-viewDir,bump);
			fixed3 refCol = texCUBE(_CubMap,refDir).rgb * texColor.rgb * _Color.rgb;

			fixed fresnel = pow(1-saturate(dot(viewDir,bump)),4);

			fixed shadow = SHADOW_ATTENUATION(i);

			fixed3 finalColor = (fresnel+refCol*(1-fresnel))*shadow;
            return fixed4(finalColor,1);
        }
        ENDCG
    }
}
FallBack &quot;Diffuse&quot;
</code></pre>
<p>}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[HLSL常用函数]]></title>
        <id>https://Wei715547.github.io/post/hlsl-chang-yong-han-shu/</id>
        <link href="https://Wei715547.github.io/post/hlsl-chang-yong-han-shu/">
        </link>
        <updated>2021-04-24T07:16:56.000Z</updated>
        <content type="html"><![CDATA[<p><a href = "https://blog.csdn.net/qq_43210334/article/details/115870675">CSDN</a><br>
<strong>一.CG/HLSL/GLSL</strong><br>
1.CG<br>
Unity shader的入门时，不管是《入门精要》还是庄老师的课，都是从CG语言开始学习的。它是由NVIDIA公司所开发的，基于C语言同时被OpenGL和Direct3D所支持的开发语言，其语法和HLSL类似。在《GPU编程与CG语言之阳春白雪》中虽然曾认为CG会越来越受欢迎，但遗憾的是，NVIDIA还是抛弃了CG，目前CG的最终版本是3.1。虽然在一些简单的shader编写上还是可以使用，但是在新的硬件环境下还是可能不支持，且对一些新功能的支持较差。</p>
<p>2.GLSL<br>
GLSL是基于OpenGL的接口，其语法体系自成一家。闫老师的Games课程，以及学校的图形学教学中，一般还是使用GLSL。但是它不支持DirectX，就不得不放弃仅支持DirectX的Xbox等平台。</p>
<p>3.HLSL<br>
HLSL是由微软开发的，在Windows平台上一家独大，多用于游戏领域。语法类似CG语言，在Unity中CG和HLSL等价。</p>
<p><strong>二.HLSL常用函数</strong><br>
1.基本数学运算<br>
<img src="https://Wei715547.github.io/post-images/1619340526887.PNG" alt="" loading="lazy"><br>
<a href = "https://graphtoy.com/">graphtoy</a></p>
<p>2.幂指对函数<br>
<img src="https://Wei715547.github.io/post-images/1619341012896.PNG" alt="" loading="lazy"></p>
<p>3.三角函数与双曲函数<br>
<img src="https://Wei715547.github.io/post-images/1619341373189.PNG" alt="" loading="lazy"></p>
<p>4.数据范围类<br>
<img src="https://Wei715547.github.io/post-images/1619341545125.PNG" alt="" loading="lazy"></p>
<p>5.类型判断类<br>
<img src="https://Wei715547.github.io/post-images/1619341600552.PNG" alt="" loading="lazy"></p>
<p>6.向量与矩阵类<br>
<img src="https://Wei715547.github.io/post-images/1619341637736.PNG" alt="" loading="lazy"></p>
<p>7.光线运算类<br>
<img src="https://Wei715547.github.io/post-images/1619341725403.PNG" alt="" loading="lazy"></p>
<p>8.2D纹理查找<br>
<img src="https://Wei715547.github.io/post-images/1619341791205.PNG" alt="" loading="lazy"></p>
<p>10.3D纹理查找<br>
<img src="https://Wei715547.github.io/post-images/1619341893660.PNG" alt="" loading="lazy"></p>
<p>11.立体纹理查找<br>
<img src="https://Wei715547.github.io/post-images/1619341941577.PNG" alt="" loading="lazy"></p>
<p>#关于ddx和ddy</p>
<p>函数ddx和ddy用于求取相邻像素间某属性差值；<br>
函数ddx和ddy输入参数通常是纹理坐标；<br>
函数ddx和ddy返回相邻像素键的属性差值；<br>
这里是测试的在片元着色器中利用底下的代码，可以表现世界空间法线；<br>
float3 col=normalize(cross(ddy(i.worldPos),ddx(i.worldPos))).xyz;<br>
<img src="https://Wei715547.github.io/post-images/1619342973207.PNG" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Shader阴影投射/接收]]></title>
        <id>https://Wei715547.github.io/post/yin-ying-chu-li/</id>
        <link href="https://Wei715547.github.io/post/yin-ying-chu-li/">
        </link>
        <updated>2021-04-23T09:01:28.000Z</updated>
        <content type="html"><![CDATA[<p><strong>1. 向其他物体投射阴影需要ShadowCaster的Pass</strong><br>
Diffuse的Fallback调用的VertexLit中的ShadowCaster Pass来实现向其他物体投射阴影<br>
Pass{<br>
Name&quot;ShadowCaster&quot;<br>
Tage{&quot;LightMde&quot; = &quot;ShadowCaster&quot;}</p>
<pre><code>CGPROGRAM
#pragma vertex vert
#pragma fragment frag    
#pragma multi_compile_shadowcaster    
#include &quot;UnityCG.cginc&quot;

Struct v2f {
V2F SHADOW CASTER; 
);

v2f vert(appdata_base v)
｛
        v2f o;
        TRANSFER_SHADOW_CASTER_NORMALOFFSET(o)//需要v中含有顶点位置与法线信息
        return o;
}
float4 frag(v2f i) : SV_Target
｛
        SHADOW_CASTER_FRAGMENT(i)
    }
</code></pre>
<p>ENDCG<br>
}<br>
<strong>对物体添加顶点动画或局部剔除时要使阴影与变化一致：需要在ShadowCaster的Pass中做出相应的调整</strong><br>
#例如：在顶点动画中<br>
Pass<br>
{<br>
Tags{&quot;LightMode&quot; = &quot;ShadowCaster&quot;}<br>
CGPROGRAM</p>
<pre><code>	float _Manitude;
	float _Frequency;
	float _InvWaveLength;
	float _Speed;

	#pragma vertex vert
	#pragma fragment frag

	#pragma multi_compile_shadowcaster
	#include &quot;UnityCG.cginc&quot;

	struct a2v{
		float4 vertex : POSITION;			
		float4 normal :NORMAL;
	};

	struct v2f{
		V2F_SHADOW_CASTER;
	};

	v2f vert(a2v v)
	{
		v2f o;
		float4 offset ;
		offset.xzw = float3(0.0,0.0,0.0);
		offset.y = sin(_Frequency*_Time.y + v.vertex.x * _InvWaveLength + v.vertex.y*_InvWaveLength + v.vertex.z*_InvWaveLength )*_Manitude;
		v.vertex = v.vertex+offset;

		TRANSFER_SHADOW_CASTER_NORMALOFFSET(o);//
		return o;
	}
	fixed4 frag(v2f i):SV_Target
	{
		SHADOW_CASTER_FRAGMENT(i)
	}
	ENDCG
}
</code></pre>
<p>#例如：存在部分剔除时<br>
Pass<br>
{<br>
Tags{&quot;LightMode&quot; = &quot;ShadowCaster&quot;}<br>
CGPROGRAM</p>
<pre><code>	float _ResAmount;
	sampler2D _ResMap;
	float4 _ResMap_ST;

	#pragma vertex vert
	#pragma fragment frag

	#pragma multi_compile_shadowcaster
	#include &quot;UnityCG.cginc&quot;

	struct v2f{
		V2F_SHADOW_CASTER;
		float2 uvBurnMap:TEXCOORD1;
	};

	v2f vert(appdata_base v)
	{
		v2f o;
		TRANSFER_SHADOW_CASTER_NORMALOFFSET(o);
		o.uvBurnMap = TRANSFORM_TEX(v.texcoord,_ResMap);
		return o;
	}
	fixed4 frag(v2f i):SV_Target
	{
		fixed3 burn = tex2D(_ResMap,i.uvBurnMap).rgb;
		clip(burn.r-_ResAmount);
		SHADOW_CASTER_FRAGMENT(i)
	}
	ENDCG
}
</code></pre>
<p><strong>2. 接收其他物体阴影</strong><br>
（1）首先需要引入内置文件：包含计算阴影时所包含的宏<br>
#include &quot;AutoLight.cginc&quot;<br>
（2）在v2f中添加内置的SHADOW_COORDS宏（用于声明一个用于阴影采样的坐标）<br>
struct v2f {<br>
float4 pos : SV_POSITION;<br>
float3 worldNormal : TEXCOORD0;<br>
float3 worldPos : TEXCOORD1;<br>
SHADOW_COORDS(2) //参数为下一个可用的寄存器<br>
}<br>
（3）在顶点着色器中用TRANSFER_SHADOW计算阴影纹理坐标<br>
v2f vert(atv v){<br>
v2f o;<br>
......<br>
TRANSFER_SHADOW(o);//使用上一步在v2f中定义的SHADOW_COORD<br>
}<br>
（4）在片原着色器中使用计算阴影<br>
fixed shadow = SHADOW_ATTENUATION(i)//参数为v2f，得到阴影值与漫反、高光相乘即可实现接收阴影</p>
<p><strong>3.使用UNITY_LIGHT_ATTENUATION统一计算阴影与光衰</strong><br>
代码基本同上引用<br>
#include &quot;Lighting.cginc&quot;<br>
#include &quot;AutoLight.cginc&quot;<br>
在片元着色器中使用宏同时计算光衰与阴影<br>
fixed4 frag(v2f i):SV_Target{<br>
......<br>
UNITY_LIGHT_ATTENUATION(atten,i,i.worldPos);//第一各参数主动生成，第二个参数v2f用于SHADOW_ATTENUATION计算阴影，第三个参数为世界空间坐标<br>
return fixed4(ambient+(diffuse+specular)*atten,1);<br>
}<br>
<strong>FallBack &quot;Transparent/VertexLit&quot;//对于混合实现的透明物体很难实现投射与接收阴影</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[溶解Shader]]></title>
        <id>https://Wei715547.github.io/post/rong-jie-shader/</id>
        <link href="https://Wei715547.github.io/post/rong-jie-shader/">
        </link>
        <updated>2021-04-22T11:45:29.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://Wei715547.github.io/post-images/1619092502635.PNG" alt="" loading="lazy"><br>
Shader &quot;Unlit/Dissolve2&quot;<br>
{<br>
Properties<br>
{<br>
_ResAmount(&quot;溶解&quot;,Range(0.0,1.0)) = 0.0<br>
_LineWidth (&quot;LineWidth&quot;, Range(0.0,0.2)) = 0.1<br>
_MainTex (&quot;Texture&quot;, 2D) = &quot;white&quot; {}<br>
_Gloss(&quot;Gliss&quot;,Range(1,100)) = 1<br>
_NormalST(&quot;NormalST&quot;, Float) = 1<br>
_NormalMap(&quot;NormalMap&quot;,2D) = &quot;while&quot;{}<br>
_ResMap(&quot;ResMap&quot;,2D) = &quot;while&quot;{}<br>
_EDGColor (&quot;EDGColor&quot;,Color) = (1,1,1,1)<br>
}<br>
SubShader<br>
{<br>
Pass<br>
{<br>
//Tags{&quot;LightMode&quot; = &quot;ForwardBase&quot;}<br>
Cull Off</p>
<pre><code>        CGPROGRAM
        #pragma vertex vert
        #pragma fragment frag
		#include &quot;UnityCG.cginc&quot;
		#include &quot;Lighting.cginc&quot;

		float _ResAmount;
		float _LineWidth;
		sampler2D _MainTex;
		float4 _MainTex_ST;
		float _Gloss;
		float _NormalST;
		sampler2D _NormalMap;
		float4 _NormalMap_ST;
		sampler2D _ResMap;
		float4 _ResMap_ST;
		float4 _EDGColor;

        struct appdata
        {
            float4 vertex : POSITION;
            float2 uv : TEXCOORD0;
			float3 normal:NORMAL;
			float4 tangent:TANGENT;
        };

        struct v2f
        {
            float2 uvMaintex : TEXCOORD0;
			float2 uvNormal : TEXCOORD1;
			float3 lightDir : TEXCOORD2;
			float3 worldvertex : TEXCOORD3;
			float3 viewDir : TEXCOORD4;
			float2 uvResMap:TEXCOORD5;
            float4 vertex : SV_POSITION;
        };


        v2f vert (appdata v)
        {
            v2f o;
            o.vertex = UnityObjectToClipPos(v.vertex);
            o.uvMaintex = TRANSFORM_TEX(v.uv, _MainTex);
			o.uvNormal = TRANSFORM_TEX(v.uv,_NormalMap);
			o.uvResMap = TRANSFORM_TEX(v.uv,_ResMap);

			TANGENT_SPACE_ROTATION;
			o.lightDir = mul(rotation,ObjSpaceLightDir(v.vertex)).xyz;
			o.worldvertex = mul(unity_ObjectToWorld,v.vertex).xyz;
			o.viewDir = mul(rotation, ObjSpaceViewDir(v.vertex)).xyz;
            return o;
        }

        fixed4 frag (v2f i) : SV_Target
        {
			fixed3 res = tex2D(_ResMap,i.uvResMap).rgb;
			clip(res.r-_ResAmount);//小于0时剔除像素

			//计算漫反射
			float3 tangenLightDir = normalize(i.lightDir);
			fixed3 tangentNormalDir = UnpackNormal(tex2D(_NormalMap,i.uvNormal));
			tangentNormalDir.xy = tangentNormalDir.xy*_NormalST;
			float3 diff = tex2D(_MainTex,i.uvMaintex);
			fixed3 diffuse = _LightColor0.rgb*diff*max(dot(tangenLightDir,tangentNormalDir)*0.5+0.5,0);
			//计算高光
			fixed3 viewDir = normalize(i.viewDir);//视线方向
			fixed3 harfDir = normalize(viewDir + tangenLightDir);//视角与平行光的平分方向
			fixed3 specular = _LightColor0.rgb * diff * pow(max(dot(tangentNormalDir, harfDir),0), _Gloss);
            fixed3 col = diffuse + specular+UNITY_LIGHTMODEL_AMBIENT.rgb*diff;
			//添加边线颜色				
			fixed3 eColor = _EDGColor;//边线颜色
			eColor = pow(eColor,5);//加强
			fixed t = 1-smoothstep(0.0,_LineWidth,res.r-_ResAmount);//像素未被剔除时差值大于线宽输出1，相减t=0：未剔除的显示原色。
			//差值小于边线，接近0时输出接近0，t增大：将被剔除的像素显色边界色
			fixed3 finalColor = lerp(col,eColor,t*step(0.0001,_ResAmount));//_ResAmount大于0时t即生效t=0原色，=1边界色

            return fixed4( finalColor,1);
        }
        ENDCG
    }
    //消融部分阴影处理
    Pass {
	Tags{&quot;LightMode&quot; = &quot;ShadowCaster&quot;}
	CGPROGRAM
	
	float _ResAmount;
	sampler2D _ResMap;
	float4 _ResMap_ST;

	#pragma vertex vert
	#pragma fragment frag

	#pragma multi_compile_shadowcaster
	#include &quot;UnityCG.cginc&quot;

	struct v2f{
		V2F_SHADOW_CASTER;
		float2 uvBurnMap:TEXCOORD1;
	};

	v2f vert(appdata_base v)
	{
		v2f o;
		TRANSFER_SHADOW_CASTER_NORMALOFFSET(o);
		o.uvBurnMap = TRANSFORM_TEX(v.texcoord,_ResMap);
		return o;
	}
	fixed4 frag(v2f i):SV_Target
	{
		fixed3 burn = tex2D(_ResMap,i.uvBurnMap).rgb;
		clip(burn.r-_ResAmount);
		SHADOW_CASTER_FRAGMENT(i)
	}
	ENDCG
}
}
</code></pre>
<p>}<br>
//调用脚本(Update中)<br>
r = Mathf.Lerp(0, 1, r+=Time.deltaTime/rtime);//rtime时间内r变为1<br>
mt.SetFloat(&quot;_ResAmount&quot;, r);<br>
//仅溶解部分代码<br>
<img src="https://Wei715547.github.io/post-images/1620714757624.PNG" alt="" loading="lazy"><br>
Shader &quot;Unlit/Dissolve&quot;<br>
{<br>
Properties<br>
{<br>
_BurnAmount (&quot;Burn Amount&quot;, Range(0.0,1.0)) = 0.0<br>
_LineWidth (&quot;LineWidth&quot;, Range(0.0,0.2)) = 0.1<br>
_EdgLightST(&quot;边缘光强度&quot;,Range(1,5)) = 3<br>
_BaseColor(&quot;BaseColor&quot;,Color) = (1,1,1,1)<br>
_BurnMap(&quot;BurnMap&quot;,2D) = &quot;while&quot;{}<br>
//_Color1 (&quot;Color1&quot;,Color) = (1,1,1,1)<br>
[HDR]_Color2 (&quot;Color2&quot;,Color) = (1,1,1,1)<br>
}<br>
SubShader<br>
{<br>
Pass{<br>
//Tags{&quot;LightMode&quot; = &quot;ForwardBase&quot;}<br>
Cull Off//双面可见</p>
<pre><code>    CGPROGRAM

    float _BurnAmount;
	float _LineWidth;
	int _EdgLightST;
	float4 _BaseColor;
	sampler2D _BurnMap;
	float4 _BurnMap_ST;
	
	
	//float4 _Color1;
	float4 _Color2;

	#pragma vertex vert
    #pragma fragment frag
	#include &quot;UnityCG.cginc&quot;
	//#pragma multi_compile_fwdbase

    struct a2v
        {
            float4 vertex : POSITION;
            float2 uv : TEXCOORD0;
        };

        struct v2f
        {                
            float4 pos : SV_POSITION;
			float2 uvBurnMap: TEXCOORD2;				
        };

	v2f vert(a2v v){
		v2f o;
		o.pos = UnityObjectToClipPos(v.vertex);		
		o.uvBurnMap = TRANSFORM_TEX(v.uv,_BurnMap);
		return o;
	}
	fixed4 frag(v2f i):SV_Target{
		fixed3 burn = tex2D(_BurnMap,i.uvBurnMap).rgb;
		clip(burn.r-_BurnAmount);

		fixed t = 1-smoothstep(0.0,_LineWidth,burn.r-_BurnAmount);
		fixed3 burnColor = _Color2;//lerp(_Color1,_Color2,t);
		burnColor = pow(burnColor,_EdgLightST);
		fixed3 finalColor = lerp(_BaseColor,burnColor,t*step(0.0001,_BurnAmount));
		return fixed4(finalColor,1);
	}
	ENDCG
}
}			
</code></pre>
<p>}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[护盾Shader]]></title>
        <id>https://Wei715547.github.io/post/hu-dun-shader/</id>
        <link href="https://Wei715547.github.io/post/hu-dun-shader/">
        </link>
        <updated>2021-04-17T10:12:46.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://Wei715547.github.io/post-images/1618655258132.PNG" alt="" loading="lazy"><br>
<a href = "https://www.bilibili.com/video/BV1kv411r7x2?p=4">视频</a><br>
<img src="https://Wei715547.github.io/post-images/1618654561889.PNG" alt="" loading="lazy"><br>
Shader &quot;Unlit/ShileShader&quot;<br>
{<br>
Properties<br>
{<br>
[HDR]_Color (&quot;六边形边缘颜色&quot;, Color) = (1,1,1,1)                    //控制每一个蜂巢网格的边缘光颜色<br>
[HDR]_Color1 (&quot;条带颜色&quot;, Color) = (1,1,1,1)                    //控制每一个蜂巢网格的主体颜色<br>
[HDR]_FresnelColor (&quot;菲尼尔颜色&quot;, Color) = (1,1,1,1)        //控制防护罩的边缘高光颜色<br>
_FresnelPower (&quot;FresnelPower&quot;, Range(0.1, 11)) = 1            //控制防护罩的边缘高光强度<br>
_FresnelAlpha (&quot;FresnelAlpha&quot;, Range(0, 50)) = 1            //控制防护罩的不透明度<br>
_MainTex (&quot;MainTex&quot;, 2D) = &quot;white&quot; {}<br>
_ShieldTex (&quot;ShieldTex&quot;, 2D) = &quot;white&quot; {}<br>
_OffsetFactor (&quot;OffsetFactor&quot;, Float) = 0.0001                //控制网格偏移程度<br>
_RollSpeed (&quot;RollSpeed&quot;, Range(0, 5)) = 1                    //控制滚动速度</p>
<pre><code>	_AlphaTex(&quot;AlphaTex&quot;, 2D) = &quot;white&quot; {}
	_ScaleOffset (&quot;ScaleOffset&quot;, Range(0, 5)) = 1            //控制防护罩缩放的程度
	_ScaleSpeed (&quot;ScaleSpeed&quot;, Range(0, 10)) = 1            //控制防护罩缩放的速度
}
SubShader
{
    Tags{&quot;Queue&quot; = &quot;Transparent&quot;/*模型渲染队列*/ &quot;IngnoreProjector&quot; = &quot;True&quot; &quot;RanderType&quot; = &quot;Transparent&quot;
	&quot;DisableBatching&quot; = &quot;True&quot;}//Pass块参数标签
    LOD 100

    Pass
    {
		ZWrite Off
		Blend SrcAlpha OneMinusSrcAlpha
		
        CGPROGRAM
		float4 _Color;
		float4 _Color1;
		float4 _FresnelColor;
		float _FresnelPower;
		float _FresnelAlpha;
		sampler2D _MainTex;
		float4 _MainTex_ST;
		sampler2D _ShieldTex;
		float4 _ShieldTex_ST;
		float _OffsetFactor;
		float _RollSpeed;

		sampler2D _AlphaTex;
		fixed _ScaleOffset;
		fixed _ScaleSpeed;

        #pragma vertex vert
        #pragma fragment frag

        #include &quot;UnityCG.cginc&quot;

        struct appdata
        {
            float4 vertex : POSITION;
            float2 uv : TEXCOORD0;
			float3 normal:NORMAL;
        };

        struct v2f
        {
			float4 vertex : SV_POSITION;
            float2 uv1 : TEXCOORD0;
			float2 uv2 : TEXCOORD1;               
			float3 worldNormal:TEXCOORD2;
			float3 worldPos:TEXCOORD3;
        };

        v2f vert (appdata v)
	{
		v2f o;
		//注意uv的范围是0~1
		float2 uv = v.normal.xy * 0.5 + 0.5;
		//加上_MainTex贴图的缩放和偏移
		uv = uv * _MainTex_ST.xy + _MainTex_ST.zw;
		//用_RollSpeed来控制滚动速度
		uv.y += _Time.y * _RollSpeed;
		//利用texDlod函数来进行采样
		float3 offset = tex2Dlod(_MainTex, float4(uv.x, uv.y, 0,0));
		offset = smoothstep(0, 1, offset);
		v.vertex.xyz += normalize(v.normal) * (offset * _OffsetFactor);
		v.vertex.xyz += normalize(v.normal) * sin(_Time.y * _ScaleSpeed) * _ScaleOffset * 0.0005;

		o.vertex = UnityObjectToClipPos(v.vertex);
		//uv1和uv相同
		o.uv1 = uv;
		//uv2为物体本身的uv
		o.uv2 = v.uv * _ShieldTex_ST.xy + _ShieldTex_ST.zw;
		o.worldNormal = normalize(UnityObjectToWorldNormal(v.normal));
		o.worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
		return o;
	}

        fixed4 frag (v2f i) : SV_Target
	{
		//菲尼尔系数Fresnel：F = pow(1-max(dot(v.n),0),_FresnelPower)
		float NdotV = max(dot(i.worldNormal, normalize(UnityWorldSpaceViewDir(i.worldPos))),0);//模型边缘NdotV接近0
		NdotV = 1 - NdotV;//取反：模型边缘为1
		fixed3 fresnelCol = pow(NdotV * _FresnelColor, _FresnelPower);//模型边缘颜色

	 //Single Shield Color
		fixed3 sCol = tex2D(_ShieldTex, i.uv2) * _Color.rgb;//六边形边缘光颜色
		fixed4 col = tex2D(_MainTex, i.uv1) * _Color1;//偏移UV采样六边形颜色

		fixed colAlpha = tex2D(_AlphaTex, i.uv1).a;//偏移UV采样遮罩

		return fixed4(fresnelCol + col + sCol, pow(NdotV, _FresnelAlpha) + colAlpha);
		//(模型边缘颜色+六边形本身颜色+添加边线颜色，边缘不透明+采样遮罩部分不透明)
	}
        ENDCG
    }
    }
    FallBack &quot;Transparent/VertexLit&quot;//混合透明物体无法投射与接收阴影
</code></pre>
<p>}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[LC链表相关]]></title>
        <id>https://Wei715547.github.io/post/lc-lian-biao-xiang-guan/</id>
        <link href="https://Wei715547.github.io/post/lc-lian-biao-xiang-guan/">
        </link>
        <updated>2021-04-16T07:36:15.000Z</updated>
        <content type="html"><![CDATA[<p><strong>1.反转链表</strong><br>
public ListNode ReversListNode(ListNode head)<br>
{<br>
if (head == null || head.next == null) return head;//返回条件到最后一个节点时返回</p>
<pre><code>        ListNode res = ReversListNode(head.next);//当前节点与上一个节点变换指向
        head.next.next = head;
        head.next = null;
        return res;
    }
</code></pre>
<p><strong>2.单链表排序</strong><br>
public ListNode SortList(ListNode head)<br>
{<br>
if (head == null||head.next==null) return head;<br>
ListNode fast = head.next;<br>
ListNode slow = head;<br>
while(fast!=null&amp;&amp;fast.next!=null)<br>
{<br>
slow = slow.next;<br>
fast = fast.next.next;<br>
}<br>
ListNode temp = slow.next;<br>
slow.next = null;<br>
//对两部分进行递归排序，分为一个节点时返回<br>
ListNode left = SortList(head);<br>
ListNode right = SortList(temp);<br>
//对比两部分大小，小的排在前面<br>
ListNode h = new ListNode();<br>
ListNode res = h;<br>
while(left!=null&amp;&amp;right!=null)<br>
{<br>
if (left.val &lt; right.val)<br>
{<br>
h.next = left;<br>
left = left.next;<br>
}<br>
else<br>
{<br>
h.next = right;<br>
right = right.next;<br>
}<br>
h = h.next;<br>
}<br>
h.next = left == null ? right : left;<br>
return res.next;<br>
}<br>
<strong>3.合并有序链表</strong><br>
public static ListNode MergeTwoLists(ListNode l1, ListNode l2)<br>
{<br>
if (l1 == null || l2 == null) return l1 == null ? l2 : l1;</p>
<pre><code>        if (l1.val &lt; l2.val)
        {
            l1.next = MergeTwoLists(l1.next, l2);
            return l1;
        }
        else
        {
            l2.next = MergeTwoLists(l1, l2.next);
            return l2;
        }
    }
    public static ListNode MergeTwoLists2(ListNode l1, ListNode l2)
    {
        ListNode head = new ListNode();
        ListNode res = head;
        while(l1 != null &amp;&amp; l2!=null)
        {
            if(l1.val&lt; l2.val)
            {
                head.next = l1;
                l1 = l1.next;
            }else
            {
                head.next = l2;
                l2 = l2.next;
            }
            head = head.next;
        }
        head.next = l1 == null ? l2 : l1;
        return res.next;
    }
    **4.排序链表去重**
    public ListNode DeleteDuplicates(ListNode head)
    {
        if (head == null || head.next == null) return head;
        ListNode res = new ListNode();
        res.next = head;
        while (head != null &amp;&amp; head.next != null)
        {
            if (head.val == head.next.val)
            {
                head.next = head.next.next;
            }
            else
                head = head.next;
        }
        return res.next;
    }
</code></pre>
<p><strong>5.链表倒数第K个节点</strong><br>
public ListNode GetKthFromEnd(ListNode head, int k) {<br>
if (head == null) return null;<br>
ListNode l = head;<br>
ListNode r = head;<br>
for (int i = 0; i &lt; k; i++)<br>
{<br>
r = r.next;<br>
}<br>
while(r!=null)<br>
{<br>
l = l.next;<br>
r = r.next;<br>
}<br>
return l;<br>
}<br>
<strong>6.回文链表</strong><br>
static ListNode p = new ListNode();<br>
public static bool IsPalindrome2(ListNode head)<br>
{<br>
p = head;<br>
return Recursion(head);<br>
}<br>
public static bool Recursion(ListNode head)<br>
{<br>
if (head == null)//到最后节点时返回<br>
return true;<br>
if (!Recursion(head.next))//不满足回文即退出<br>
return false;</p>
<pre><code>        if (p.val != head.val)//不相等时即不是回文链表
            return false;
        p = p.next;//相等头结点下一，返回上一层节点继续比较
        return true;
    }   
</code></pre>
<p><strong>7.相交链表</strong><br>
public ListNode GetIntersectionNode(ListNode headA, ListNode headB) {<br>
if (headA == null || headB == null) return null;</p>
<pre><code>        HashSet&lt;ListNode&gt; list = new HashSet&lt;ListNode&gt;();
        while(headA!=null)
        {
            list.Add(headA);
            headA = headA.next;
        }
        while(headB!=null)
        {
            if (!list.Contains(headB))
            {
                list.Add(headB);
                headB = headB.next;
            }
            else
                return headB;
        }
        return null;
}
</code></pre>
<p><strong>//8.环形链表</strong><br>
public bool HasCycle(ListNode head)<br>
{<br>
ListNode pos = head;<br>
HashSet<ListNode> set = new HashSet<ListNode>();</p>
<pre><code>        while (pos != null)
        {
            if (!set.Contains(pos))
            {
                set.Add(pos);
                pos = pos.next;
            }
            else
            {
                return true;
            }
        }
        return false;
    }
</code></pre>
<p><strong>//9.奇偶链表</strong><br>
public ListNode OddEvenList(ListNode head)<br>
{<br>
if (head == null || head.next == null) return head;</p>
<pre><code>        ListNode odd = head;
        ListNode even = head.next;
        ListNode evenHead = head.next;
        while (even != null &amp;&amp; even.next != null)
        {
            odd.next = odd.next.next;
            odd = odd.next;
            even.next = even.next.next;
            even = even.next;
        }
        odd.next = evenHead;
        return head;
    }
   ** //10.两两交换链表中的节点**
    public ListNode SwapPairs(ListNode head)
    {
        if (head == null || head.next == null)
        {
            return head;
        }
        ListNode next = head.next;//后一个节点
        head.next = SwapPairs(head.next.next);//前一个节点等于下一层递归返回的后一个节点
        next.next = head;//后一个节点指向前一个节点
        return next;
    }
    public ListNode SwapPairs2(ListNode head)
    {
        ListNode dummy = new ListNode();            
        ListNode res = dummy;
        dummy.next = head;
        ListNode first = new ListNode();
        ListNode second = new ListNode();
        while(dummy.next!=null&amp;&amp;dummy.next.next!=null)
        {
            first = dummy.next;
            second = dummy.next.next;
            first.next = second.next;
            second.next = first;
            dummy.next = second;
            dummy = dummy.next.next;
        }
        return res.next;
    }</code></pre>
]]></content>
    </entry>
</feed>