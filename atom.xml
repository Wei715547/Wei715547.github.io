<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Wei715547.github.io</id>
    <title>Weiwei的个人网站</title>
    <updated>2020-05-12T08:30:21.956Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Wei715547.github.io"/>
    <link rel="self" href="https://Wei715547.github.io/atom.xml"/>
    <subtitle>7</subtitle>
    <logo>https://Wei715547.github.io/images/avatar.png</logo>
    <icon>https://Wei715547.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Weiwei的个人网站</rights>
    <entry>
        <title type="html"><![CDATA[Unity---一个脚本调用另一个脚本中方法的几种方法]]></title>
        <id>https://Wei715547.github.io/post/unity-yi-ge-jiao-ben-diao-yong-ling-yi-ge-jiao-ben-zhong-fang-fa-de-ji-chong-fang-fa/</id>
        <link href="https://Wei715547.github.io/post/unity-yi-ge-jiao-ben-diao-yong-ling-yi-ge-jiao-ben-zhong-fang-fa-de-ji-chong-fang-fa/">
        </link>
        <updated>2020-05-12T07:39:30.000Z</updated>
        <content type="html"><![CDATA[<p>1.将要被调用的脚本对象，直接拖到调用者脚本上<br>
之后通过GetComponent&lt;被调用脚本名&gt;().方法名();<br>
直接获取对象上挂载的脚本来调用目标方法。<br>
<img src="https://Wei715547.github.io/post-images/1589269952547.PNG" alt="" loading="lazy"></p>
<p>2.在Hierarchy面板查找目标脚本<br>
FindObjectOfType&lt;脚本名&gt;().方法名();---返回第一个被加载目标脚本</p>
<p>FindObjectsOfType&lt;脚本名&gt;().方法名();---返回所有被加载目标脚本数组<br>
<img src="https://Wei715547.github.io/post-images/1589270757762.PNG" alt="" loading="lazy"></p>
<p>3.单例模式---在被调用的脚本中，公开声明一个静态的该脚本实例，在初始化时使&quot;实例=this&quot;<br>
便于在其他脚本中直接调用该脚本与其中的方法。<br>
<img src="https://Wei715547.github.io/post-images/1589271341241.PNG" alt="" loading="lazy"><br>
<img src="https://Wei715547.github.io/post-images/1589271396945.PNG" alt="" loading="lazy"></p>
<p>两脚本有碰撞，触发关系时可直接利用<br>
(碰撞)collsion.gameObject.GetComponent&lt;被调用脚本名&gt;().方法名();<br>
(触发)collsion.GetComponent&lt;被调用脚本名&gt;().方法名();<br>
或SendMessage（以”方法名“调用物体中继承 MonoBehaviour 脚本的方法.）<br>
(碰撞)collision.gameObject.SendMessage(&quot;方法名&quot;);<br>
(触发)collsion..SendMessage(&quot;方法名&quot;);<br>
调用对方脚本中的方法<br>
<img src="https://Wei715547.github.io/post-images/1589272112653.PNG" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[委托，事件，Lamda表达式（对方法的传递/调用）]]></title>
        <id>https://Wei715547.github.io/post/wei-tuo-shi-jian-lamda-biao-da-shi-dui-fang-fa-de-chuan-di-diao-yong/</id>
        <link href="https://Wei715547.github.io/post/wei-tuo-shi-jian-lamda-biao-da-shi-dui-fang-fa-de-chuan-di-diao-yong/">
        </link>
        <updated>2020-05-12T04:19:15.000Z</updated>
        <content type="html"><![CDATA[<p>using System;</p>
<p>namespace 委托<br>
{<br>
class Program<br>
{<br>
//委托类型：定义了委托实例可以调用哪类方法，<br>
//具体来说，委托类型定义了方法的返回值类型了参数<br>
//delegate 要调用方法的返回值类型 委托类型名 (参数)</p>
<pre><code>    //例：定义一个带参数，无返回值的委托
    //（创建的委托必须与索要传递的方法，返回值/参数类型相同）
    public delegate void SayHelloDlg(string content);

    //SayHelloDlg类型的事件
    public static event SayHelloDlg SayHelloEvent;


    //主函数
    static void Main(string[] args)
    {
        //委托的声明
        //委托类型名 = 目标方法
        SayHelloDlg dlg = SayHello;
        //委托的使用方法
        //dlg.Invoke(&quot;老王&quot;);
        dlg(&quot;老王&quot;);            
        //委托的解释：将方法以变量形式传递，并以方法形式执行。(以委托来调用方法，解耦)
        //SayHelloDlg dlg = new SayHelloDlg(SayHello);

        //(多播委托)委托链
        dlg += SayBay;//添加
        dlg(&quot;老八&quot;);  //（实际+,-,+=,-+编译成 System.Delegate的Combine和Remove两个静态方法）
        dlg -= SayBay;//注销
        dlg(&quot;老八&quot;);
        //如果调用的方法有返回值，那么接收的返回值是调用的最后一个方法的返回值，前面调用的方法返回值就被舍弃了。


        //匿名函数
        SayHelloDlg dlg1 = delegate (string name)
        {
            Console.WriteLine(&quot;{0},是匿名函数&quot;, name);
        };

        dlg1(&quot;老七&quot;);


        //lamda语句
        SayHelloDlg dlg2 = (name) =&gt;
         {
             Console.WriteLine(&quot;{0},是lamda语句&quot;, name);
         };

        dlg2(&quot;老四&quot;);

        //事件

        //注册事件
        SayHelloEvent += Program_SayHelloEvent;
        //SayHelloEvent -= Program_SayHelloEvent; 

        if (SayHelloEvent != null)
        {
            SayHelloEvent(&quot;小八&quot;);//调用事件
        }
    }

    private static void Program_SayHelloEvent(string content)
    {
        Console.WriteLine(&quot;{0},是事件&quot;, content);
    }



    public static void SayHello(string name)
    {
        Console.WriteLine(&quot;{0},你好啊&quot;, name);
    }

    //表达式形式
    //public static void SayHello(string name) =&gt; Console.WriteLine(&quot;{0},你好啊&quot;, name);


    public static void SayBay(string name)
    {
        Console.WriteLine(&quot;{0},再见啊&quot;,name);
    }
}
</code></pre>
<p>}</p>
<p><img src="https://Wei715547.github.io/post-images/1589257645974.PNG" alt="" loading="lazy"><br>
<img src="https://Wei715547.github.io/post-images/1589257654429.PNG" alt="" loading="lazy"><br>
<img src="https://Wei715547.github.io/post-images/1589257662607.PNG" alt="" loading="lazy"><br>
<img src="https://Wei715547.github.io/post-images/1589257671087.PNG" alt="" loading="lazy"><br>
<img src="https://Wei715547.github.io/post-images/1589257676945.PNG" alt="" loading="lazy"><br>
<img src="https://Wei715547.github.io/post-images/1589257683327.PNG" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[DG Tweening]]></title>
        <id>https://Wei715547.github.io/post/dg-tweening/</id>
        <link href="https://Wei715547.github.io/post/dg-tweening/">
        </link>
        <updated>2020-05-11T12:17:14.000Z</updated>
        <content type="html"><![CDATA[<p>using System.Collections;<br>
using System.Collections.Generic;<br>
using UnityEngine;<br>
using DG.Tweening;<br>
using UnityEngine.UI;<br>
public class InDoor : MonoBehaviour<br>
{</p>
<pre><code>public GameObject InDoorPanel;

private void Start()
{
    InDoorPanel.GetComponent&lt;Image&gt;().color = new Color(InDoorPanel.GetComponent&lt;Image&gt;().color.r, 
        InDoorPanel.GetComponent&lt;Image&gt;().color.g, InDoorPanel.GetComponent&lt;Image&gt;().color.b, 0);
    InDoorPanel.transform.position = new Vector3(InDoorPanel.transform.position.x,
        -100, InDoorPanel.transform.position.z);
    //InDoorPanel.transform.localScale= Vector3.zero;
    InDoorPanel.SetActive(false);
}

private void OnTriggerEnter2D(Collider2D collision)
{
    if (collision.tag == &quot;Player&quot;)
    {
        InDoorPanel.SetActive(true);
        InDoorPanel.GetComponent&lt;Image&gt;().DOColor(new Color(InDoorPanel.GetComponent&lt;Image&gt;().color.r, 
            InDoorPanel.GetComponent&lt;Image&gt;().color.g, InDoorPanel.GetComponent&lt;Image&gt;().color.b, 0.7f), 0.3f);
        InDoorPanel.transform.DOMoveY(110, 0.3f);
        //InDoorPanel.transform.DOScale(Vector3.one, 0.3f);
    }
}

private void OnTriggerExit2D(Collider2D collision)
{
    if (collision.tag == &quot;Player&quot;)
    {
        InDoorPanel.GetComponent&lt;Image&gt;().DOColor(new Color(InDoorPanel.GetComponent&lt;Image&gt;().color.r, 
            InDoorPanel.GetComponent&lt;Image&gt;().color.g, InDoorPanel.GetComponent&lt;Image&gt;().color.b, 0), 0.3f);
        InDoorPanel.transform.DOMoveY(-100, 0.3f).OnComplete(() =&gt; InDoorPanel.SetActive(false));
        //InDoorPanel.transform.DOScale(Vector3.zero, 0.3f);
    }
}
</code></pre>
<p>}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[最高分排序]]></title>
        <id>https://Wei715547.github.io/post/zui-gao-fen-pai-xu/</id>
        <link href="https://Wei715547.github.io/post/zui-gao-fen-pai-xu/">
        </link>
        <updated>2020-05-10T04:36:59.000Z</updated>
        <content type="html"><![CDATA[<p>public  void SaveScore (int score)<br>
{<br>
List<int> list = bestScoreArr.ToList();//先将数组转化为List<br>
//系统:Linq方法(using System.Linq;)<br>
list.Sort((x, y) =&gt; (-x.CompareTo(y)));//调用List的Sort方法，从大到小对list进行排序[（-x）(从小到大改为x<br>
bestScoreArr = list.ToArray();//将排好序的list转给数组</p>
<pre><code>    //50  20  10 加入传score为60，则将60排在低 bestScoreArr[0]

    int index = -1;
    for (int i = 0; i &lt; bestScoreArr .Count() ; i++)
    {
        if (score &gt;bestScoreArr [i])//score依次与数组中的数进行对比，当比一个数大时，记录这个数的索引将后面的数都向后移。
        {
            index = i;
        }
    }
    if (index == -1) return;//score比数组中的值都小，不需保存，退出方法。

    for (int i = bestScoreArr .Length -1; i &gt;index ; i--)//从后向前将index之后的数据依次向后移
    {
        bestScoreArr[i] = bestScoreArr[i - 1];

    }
    bestScoreArr[index] = score;//将score填入空出位。
    Save();//保存。
}
//获取最大值方法(Linq)
public int GetBestScore()
{
    return bestScoreArr.Max();
}
</code></pre>
<p>//要存储的游戏数据类<br>
public class GameDate<br>
{<br>
public  static bool IsAgainGame =false ;</p>
<pre><code>private bool isFirstGame;
private bool isMusicOn;

private int[] bestScoreArr;
public void SetBestScoreArr(int[] bestScoreArr)
{
    this.bestScoreArr = bestScoreArr;
}
 public int [] GetBestScoreArr()
{
    return bestScoreArr;
}
//（其他......get;set方法省略）

private int selectSkin;
private bool[] skinUnlocked;
private int diamondCount;
</code></pre>
<p>}</p>
<pre><code>/// &lt;summary&gt;
/// 储存数据
/// &lt;/summary&gt;
private void Save()
{
    try
    {
        BinaryFormatter bf = new BinaryFormatter();
        using (FileStream fs = File.Create(Application.persistentDataPath + &quot;/DameData.data&quot;))

        {
            data.SetBestScoreArr(bestScoreArr);
            data.SetDiamondCount(diamondCount);
            data.SetIsFirstGame(isFirstGame);
            data.SetMusicOn(isMusicOn);
            data.SetSelectSkin(selectSkin);
            data.SetSkinUnlocked(skinUnlocked);
            bf.Serialize(fs, data);

        }
    }
    catch (System.Exception e)
    {
        Debug.Log(e.Message);

    }
}
/// &lt;summary&gt;
/// 读取数据
///using System.Runtime.Serialization.Formatters.Binary;
///using System.IO;
/// &lt;/summary&gt;
private void Read()
{
    try
    {
        BinaryFormatter bf = new BinaryFormatter();
        using (FileStream fs = File .Open (Application.persistentDataPath + &quot;/DameData.data&quot;,FileMode.Open ))
        {
            data = (GameDate )bf.Deserialize(fs);
        }
    }
    catch (System.Exception e)
    {
        Debug.Log(e.Message);
    }
}</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ray]]></title>
        <id>https://Wei715547.github.io/post/ray/</id>
        <link href="https://Wei715547.github.io/post/ray/">
        </link>
        <updated>2020-05-09T11:48:20.000Z</updated>
        <content type="html"><![CDATA[<p>void Update()<br>
{<br>
if (Input.GetMouseButtonDown(1))<br>
{<br>
Ray ray = Camera .main .ScreenPointToRay ( Input.mousePosition);<br>
RaycastHit hit;<br>
if (!Physics.Raycast(ray, out hit))<br>
{<br>
//hit.collider .gameObject //射线打到的物体<br>
return;<br>
}<br>
navMeshAgent.destination = hit.point ;//碰撞点<br>
}</p>
<pre><code>}
![](https://Wei715547.github.io/post-images/1589025091557.jpg)
![](https://Wei715547.github.io/post-images/1589025123139.jpg)</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[插值/自定义曲线]]></title>
        <id>https://Wei715547.github.io/post/cha-zhi/</id>
        <link href="https://Wei715547.github.io/post/cha-zhi/">
        </link>
        <updated>2020-05-09T11:40:43.000Z</updated>
        <content type="html"><![CDATA[<pre><code>public AnimationCurve sp;
private float x;//带入曲线x+=Time.deltaTime/psTime
public float pstime;//越大移动“y”(sp.Evaluate(x))增长越慢

if (Input.GetKey(KeyCode.L))
    {
    x += Time.deltaTime / pstime;
    transform.position = Vector3.Lerp(transform.position, Vector3.up * 5, sp.Evaluate(x));
        //Lerp(a,b,f)---f:0~1, 0时返回a,1时返回b，0.5时返回a,b中间值
    }
    else x = 0;</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SendMessage]]></title>
        <id>https://Wei715547.github.io/post/sendmessage/</id>
        <link href="https://Wei715547.github.io/post/sendmessage/">
        </link>
        <updated>2020-05-09T08:16:59.000Z</updated>
        <content type="html"><![CDATA[<p>private void OnCollisionEnter2D(Collision2D collision)<br>
{<br>
if (collision.gameObject.tag == &quot;Enm&quot;)<br>
{<br>
Enemis eni = collision.gameObject.GetComponent<Enemis>();<br>
if (ani.GetBool(&quot;Down&quot;))<br>
{<br>
eni.Died();</p>
<pre><code>            //collision.gameObject.SendMessage(&quot;Dide&quot;);

            /*FrogRangAI frog =                        collision.gameObject.GetComponent&lt;FrogRangAI&gt;();
            frog.Died();*/
            
            AddUpForce();
        }</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Unity面试易考题-问题]]></title>
        <id>https://Wei715547.github.io/post/unity-mian-shi-yi-kao-ti-wen-ti/</id>
        <link href="https://Wei715547.github.io/post/unity-mian-shi-yi-kao-ti-wen-ti/">
        </link>
        <updated>2020-05-09T05:22:15.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://Wei715547.github.io/post-images/1589001744941.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Unity面试易考题-基本框架]]></title>
        <id>https://Wei715547.github.io/post/unity-mian-shi-yi-kao-ti-ji-ben-kuang-jia/</id>
        <link href="https://Wei715547.github.io/post/unity-mian-shi-yi-kao-ti-ji-ben-kuang-jia/">
        </link>
        <updated>2020-05-09T05:17:15.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://Wei715547.github.io/post-images/1589001472730.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Unity面试易考题-数据结构]]></title>
        <id>https://Wei715547.github.io/post/unity-mian-shi-yi-kao-ti-shu-ju-jie-gou/</id>
        <link href="https://Wei715547.github.io/post/unity-mian-shi-yi-kao-ti-shu-ju-jie-gou/">
        </link>
        <updated>2020-05-09T05:14:10.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://Wei715547.github.io/post-images/1589001324001.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
</feed>