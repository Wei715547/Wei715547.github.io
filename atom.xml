<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Wei715547.github.io</id>
    <title>Weiwei的个人网站</title>
    <updated>2020-03-14T04:52:07.648Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Wei715547.github.io"/>
    <link rel="self" href="https://Wei715547.github.io/atom.xml"/>
    <subtitle>7</subtitle>
    <logo>https://Wei715547.github.io/images/avatar.png</logo>
    <icon>https://Wei715547.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Weiwei的个人网站</rights>
    <entry>
        <title type="html"><![CDATA[jump&落地检测]]></title>
        <id>https://Wei715547.github.io/post/jumpandluo-di-jian-ce/</id>
        <link href="https://Wei715547.github.io/post/jumpandluo-di-jian-ce/">
        </link>
        <updated>2020-03-14T04:45:53.000Z</updated>
        <content type="html"><![CDATA[<p>using System.Collections;<br>
using System.Collections.Generic;<br>
using UnityEngine;</p>
<p>public class JumpBox : MonoBehaviour<br>
{<br>
[Range(0, 10)] public float jumpVelocity = 5f;<br>
public LayerMask mask;<br>
public float boxHeight;<br>
private Vector2 playerSize;<br>
private Vector2 boxSize;<br>
private bool jumpRequest;<br>
private bool grounded;<br>
private Rigidbody2D _rigidbody2D;</p>
<pre><code>// Start is called before the first frame update
void Start()
{
    _rigidbody2D = GetComponent&lt;Rigidbody2D&gt;();
    playerSize = GetComponent&lt;SpriteRenderer&gt;().bounds.size;
    boxSize = new Vector2(playerSize.x * 0.8f, boxHeight );

}

// Update is called once per frame
void Update()
{
    if (Input .GetButtonDown (&quot;Jump&quot;)&amp;&amp;grounded )
    {
        jumpRequest = true;
    }
}
private void FixedUpdate()
{
    if (jumpRequest )
    {
        _rigidbody2D.AddForce(Vector2.up * jumpVelocity, ForceMode2D.Impulse);
        jumpRequest = false ;
        grounded = false;
    }
    else
    {
        Vector2 boxCenter = (Vector2)transform.position + (Vector2.down  * playerSize.y * 0.5f);
        if (Physics2D .OverlapBox (boxCenter ,boxSize ,0,mask )!=null )
        {
            grounded = true;
        }
        else
        {
            grounded = false ;
        }
    }
}
private void OnDrawGizmos()
{
    if (grounded )
    {
        Gizmos.color =Color.red;
    }
    else
    {
        Gizmos.color=Color.green;
    }

    Vector2 boxCenter = (Vector2)transform.position + (Vector2.down  * playerSize.y * 0.5f);
    Gizmos.DrawWireCube(boxCenter, boxSize);
}
</code></pre>
<p>}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2D-LR-MOVE]]></title>
        <id>https://Wei715547.github.io/post/2d-lr-move/</id>
        <link href="https://Wei715547.github.io/post/2d-lr-move/">
        </link>
        <updated>2020-03-08T10:08:16.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://Wei715547.github.io/post-images/1583662256843.PNG" alt="" loading="lazy"><br>
using System.Collections;<br>
using System.Collections.Generic;<br>
using UnityEngine;</p>
<p>public class Move : MonoBehaviour<br>
{<br>
public float moveSpeed = 3;<br>
public Animator animator;</p>
<pre><code>// Start is called before the first frame update
void Start()
{
    
}

// Update is called once per frame
void Update()
{
    
}
private void FixedUpdate()
{

    move();


}

private void move()//移动方法
{
    float h = Input.GetAxisRaw(&quot;Horizontal&quot;);
    transform.Translate(Vector3.right * h * moveSpeed * Time.deltaTime, Space.World);
    animator.SetFloat(&quot;Horizontal&quot;, Input.GetAxis(&quot;Horizontal&quot;));

}
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Controller]]></title>
        <id>https://Wei715547.github.io/post/controller/</id>
        <link href="https://Wei715547.github.io/post/controller/">
        </link>
        <updated>2020-03-06T04:48:14.000Z</updated>
        <content type="html"><![CDATA[<p>using UnityEngine;<br>
using System.Collections;<br>
using System.Collections.Generic;<br>
using MoreMountains.Tools;</p>
<p>namespace MoreMountains.CorgiEngine<br>
{	<br>
[RequireComponent(typeof(BoxCollider2D))]</p>
<pre><code>// DISCLAIMER : this controller's been built from the ground up for the Corgi Engine. It takes clues and inspirations from various methods and articles freely 
// available online. Special thanks to @prime31 for his talent and patience, Yoann Pignole, Mysteriosum and Sebastian Lague, among others for their great articles
// and tutorials on raycasting. If you have questions or suggestions, feel free to contact me at unitysupport@reuno.net

/// &lt;summary&gt;
/// The character controller that handles the character's gravity and collisions.
/// It requires a Collider2D and a rigidbody to function.
/// &lt;/summary&gt;
public class CorgiController : MonoBehaviour 
{
	/// the various states of our character
	public CorgiControllerState State { get; protected set; }
	/// the initial parameters
	public CorgiControllerParameters DefaultParameters;
	/// the current parameters
	public CorgiControllerParameters Parameters{get{return _overrideParameters ?? DefaultParameters;}}
	
	[Space(10)]	
	[Header(&quot;Collision Masks&quot;)]
	/// The layer mask the platforms are on
	public LayerMask PlatformMask=0;
	/// The layer mask the moving platforms are on
	public LayerMask MovingPlatformMask=0;
	/// The layer mask the one way platforms are on
	public LayerMask OneWayPlatformMask=0;
	/// The layer mask the moving one way platforms are on
	public LayerMask MovingOneWayPlatformMask=0;
	/// gives you the object the character is standing on
	public GameObject StandingOn { get; protected set; }	
	/// the current velocity of the character
	public Vector2 Speed { get{ return _speed; } }
	/// the value of the forces applied at one point in time 
	public Vector2 ForcesApplied { get; protected set; }
	
	[Space(10)]	
	[Header(&quot;Raycasting&quot;)]
	/// the number of rays cast horizontally
	public int NumberOfHorizontalRays = 8;
	/// the number of rays cast vertically
	public int NumberOfVerticalRays = 8;
	/// a small value added to all raycasts to accomodate for edge cases	
	public float RayOffset=0.05f; 
	
	public Vector3 ColliderCenter {get
		{
			Vector3 colliderCenter = Vector3.Scale(transform.localScale, _boxCollider.offset);
			return colliderCenter;
		}}
	public Vector3 ColliderPosition {get
		{
			Vector3 colliderPosition = transform.position + ColliderCenter;
			return colliderPosition;
		}}
	public Vector3 ColliderSize {get
		{
			Vector3 colliderSize = Vector3.Scale(transform.localScale, _boxCollider.size);
			return colliderSize;
		}}
	public Vector3 BottomPosition {get
		{
			Vector3 colliderBottom = new Vector3(ColliderPosition.x,ColliderPosition.y - (ColliderSize.y / 2),ColliderPosition.z);
			return colliderBottom;
		}}
	public float Friction { get
		{
			return _friction;
		}}

    // parameters override storage
    protected CorgiControllerParameters _overrideParameters;
    // private local references			
    protected Vector2 _speed;
    protected float _friction=0;
    protected float _fallSlowFactor;
    protected Vector2 _externalForce;
    protected Vector2 _newPosition;
    protected Transform _transform;
    protected BoxCollider2D _boxCollider;
    protected GameObject _lastStandingOn;
    protected LayerMask _platformMaskSave;
	protected PathMovement _movingPlatform=null;
    protected float _movingPlatformCurrentGravity;
	protected bool _gravityActive=true;

    protected const float _largeValue=500000f;
    protected const float _smallValue=0.0001f;
    protected const float _obstacleHeightTolerance=0.05f;
	protected const float _movingPlatformsGravity=-500;

    protected Vector2 _originalColliderSize;
    protected Vector2 _originalColliderOffset;

    // rays parameters
    protected Rect _rayBoundsRectangle;

    protected List&lt;RaycastHit2D&gt; _contactList;

    /// &lt;summary&gt;
    /// initialization
    /// &lt;/summary&gt;
    protected virtual void Awake()
	{
		// we get the various components
		_transform=transform;
		_boxCollider = (BoxCollider2D)GetComponent&lt;BoxCollider2D&gt;();
		_originalColliderSize = _boxCollider.size;
		_originalColliderOffset = _boxCollider.offset;
		
		// we test the boxcollider's x offset. If it's not null we trigger a warning.
		if (_boxCollider.offset.x!=0)
		{
			Debug.LogWarning(&quot;The boxcollider for &quot;+gameObject.name+&quot; should have an x offset set to zero. Right now this may cause issues when you change direction close to a wall.&quot;);
		}

		// raycast list and state init
		_contactList = new List&lt;RaycastHit2D&gt;();
		State = new CorgiControllerState();
		
		// we add the edge collider platform and moving platform masks to our initial platform mask so they can be walked on	
		_platformMaskSave = PlatformMask;	
		PlatformMask |= OneWayPlatformMask;
		PlatformMask |= MovingPlatformMask;
		PlatformMask |= MovingOneWayPlatformMask;
		
		State.Reset();
		SetRaysParameters();
	}

    /// &lt;summary&gt;
    /// Use this to add force to the character
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;force&quot;&gt;Force to add to the character.&lt;/param&gt;
    public virtual void AddForce(Vector2 force)
	{
		_speed += force;	
		_externalForce += force;
	}
	
	/// &lt;summary&gt;
	///  use this to set the horizontal force applied to the character
	/// &lt;/summary&gt;
	/// &lt;param name=&quot;x&quot;&gt;The x value of the velocity.&lt;/param&gt;
	public virtual void AddHorizontalForce(float x)
	{
		_speed.x += x;
		_externalForce.x += x;
	}
	
	/// &lt;summary&gt;
	///  use this to set the vertical force applied to the character
	/// &lt;/summary&gt;
	/// &lt;param name=&quot;y&quot;&gt;The y value of the velocity.&lt;/param&gt;
	public virtual void AddVerticalForce(float y)
	{
		_speed.y += y;
		_externalForce.y += y;
	}
	
	/// &lt;summary&gt;
	/// Use this to set the force applied to the character
	/// &lt;/summary&gt;
	/// &lt;param name=&quot;force&quot;&gt;Force to apply to the character.&lt;/param&gt;
	public virtual void SetForce(Vector2 force)
	{
		_speed = force;
		_externalForce = force;	
	}
	
	/// &lt;summary&gt;
	///  use this to set the horizontal force applied to the character
	/// &lt;/summary&gt;
	/// &lt;param name=&quot;x&quot;&gt;The x value of the velocity.&lt;/param&gt;
	public virtual void SetHorizontalForce (float x)
	{
		_speed.x = x;
		_externalForce.x = x;
	}
	
	/// &lt;summary&gt;
	///  use this to set the vertical force applied to the character
	/// &lt;/summary&gt;
	/// &lt;param name=&quot;y&quot;&gt;The y value of the velocity.&lt;/param&gt;
	public virtual void SetVerticalForce (float y)
	{
		_speed.y = y;
		_externalForce.y = y;
		
	}

    /// &lt;summary&gt;
    /// This is called every frame
    /// &lt;/summary&gt;
    protected virtual void Update()
	{	
		EveryFrame();
	}

	/// &lt;summary&gt;
	/// Every frame, we apply the gravity to our character, then check using raycasts if an object's been hit, and modify its new position 
    /// accordingly. When all the checks have been done, we apply that new position. 
	/// &lt;/summary&gt;
	protected virtual void EveryFrame()
	{
		_contactList.Clear();

		if (_gravityActive)
		{
			_speed.y += (Parameters.Gravity + _movingPlatformCurrentGravity) * Time.deltaTime;
		}
				
		if (_fallSlowFactor!=0)
		{
			_speed.y*=_fallSlowFactor;
		}

		// we initialize our newposition, which we'll use in all the next computations			
		_newPosition=Speed * Time.deltaTime;
					
		State.WasGroundedLastFrame = State.IsCollidingBelow;
		State.WasTouchingTheCeilingLastFrame = State.IsCollidingAbove;
		State.Reset(); 

		// we initialize our rays
		SetRaysParameters();

		HandleMovingPlatforms();

		// we store our current speed for use in moving platforms mostly
		ForcesApplied = _speed;

		// we cast rays on all sides to check for slopes and collisions
		CastRaysToTheSides();
		CastRaysBelow();	
		CastRaysAbove();

		// we move our transform to its next position
		_transform.Translate(_newPosition,Space.World);			

		SetRaysParameters();	

		// we compute the new speed
		if (Time.deltaTime &gt; 0)
		{
			_speed = _newPosition / Time.deltaTime;	
		}	

		// we apply our slope speed factor based on the slope's angle
		if (State.IsGrounded)
		{
			_speed.x *= Parameters.SlopeAngleSpeedFactor.Evaluate(State.BelowSlopeAngle * Mathf.Sign(_speed.y));
		}

		if (!State.OnAMovingPlatform)				
		{
			// we make sure the velocity doesn't exceed the MaxVelocity specified in the parameters
			_speed.x = Mathf.Clamp(_speed.x,-Parameters.MaxVelocity.x,Parameters.MaxVelocity.x);
			_speed.y = Mathf.Clamp(_speed.y,-Parameters.MaxVelocity.y,Parameters.MaxVelocity.y);
		}

		
		// we change states depending on the outcome of the movement
		if( !State.WasGroundedLastFrame &amp;&amp; State.IsCollidingBelow )
			State.JustGotGrounded=true;
			
		if (State.IsCollidingLeft || State.IsCollidingRight || State.IsCollidingBelow || State.IsCollidingRight)
		{
			OnCorgiColliderHit();
		}		


		
		_externalForce.x=0;
		_externalForce.y=0;
	}

	/// &lt;summary&gt;
	/// If the CorgiController is standing on a moving platform, we match its speed
	/// &lt;/summary&gt;
	protected virtual void HandleMovingPlatforms()
	{
		if (_movingPlatform!=null)			
		{

			if (!float.IsNaN(_movingPlatform.CurrentSpeed.x) &amp;&amp; !float.IsNaN(_movingPlatform.CurrentSpeed.y) &amp;&amp; !float.IsNaN(_movingPlatform.CurrentSpeed.z))
			{
				_transform.Translate(_movingPlatform.CurrentSpeed*Time.deltaTime);
			}

			if ( (Time.timeScale==0) || float.IsNaN(_movingPlatform.CurrentSpeed.x) || float.IsNaN(_movingPlatform.CurrentSpeed.y) || float.IsNaN(_movingPlatform.CurrentSpeed.z) )
			{
				return;
			}

			if ((Time.deltaTime&lt;=0))
			{
				return;
			}

			State.OnAMovingPlatform=true;

			GravityActive(false);

			_movingPlatformCurrentGravity=_movingPlatformsGravity;

			_newPosition.y = _movingPlatform.CurrentSpeed.y*Time.deltaTime;		

			_speed = - _newPosition / Time.deltaTime;	
			SetRaysParameters();
		}
	}

	/// &lt;summary&gt;
	/// Disconnects the CorgiController from its current moving platform.
	/// &lt;/summary&gt;
	public virtual void DetachFromMovingPlatform()
	{
		State.OnAMovingPlatform=false;
		_movingPlatform=null;
		_movingPlatformCurrentGravity=0;
	}

    /// &lt;summary&gt;
    /// Casts rays to the sides of the character, from its center axis.
    /// If we hit a wall/slope, we check its angle and move or not according to it.
    /// &lt;/summary&gt;
    protected virtual void CastRaysToTheSides() 
	{			
		float movementDirection=1;	
		if ((_speed.x &lt; 0) || (_externalForce.x&lt;0))
			movementDirection = -1;
		
		float horizontalRayLength = Mathf.Abs(_speed.x*Time.deltaTime) + _rayBoundsRectangle.width/2 + RayOffset*2;
		
		Vector2 horizontalRayCastFromBottom=new Vector2(_rayBoundsRectangle.center.x,
		                                                _rayBoundsRectangle.yMin+_obstacleHeightTolerance);										
		Vector2 horizontalRayCastToTop=new Vector2(	_rayBoundsRectangle.center.x,
		                                           _rayBoundsRectangle.yMax-_obstacleHeightTolerance);				
		
		RaycastHit2D[] hitsStorage = new RaycastHit2D[NumberOfHorizontalRays];	
				
		for (int i=0; i&lt;NumberOfHorizontalRays;i++)
		{	
			Vector2 rayOriginPoint = Vector2.Lerp(horizontalRayCastFromBottom,horizontalRayCastToTop,(float)i/(float)(NumberOfHorizontalRays-1));
			
			if ( State.WasGroundedLastFrame &amp;&amp; i == 0 )			
				hitsStorage[i] = MMDebug.RayCast (rayOriginPoint,movementDirection*(Vector2.right),horizontalRayLength,PlatformMask,Color.red,Parameters.DrawRaycastsGizmos);	
			else
				hitsStorage[i] = MMDebug.RayCast (rayOriginPoint,movementDirection*(Vector2.right),horizontalRayLength,PlatformMask &amp; ~OneWayPlatformMask &amp; ~MovingOneWayPlatformMask,Color.red,Parameters.DrawRaycastsGizmos);			
			
			if (hitsStorage[i].distance &gt;0)
			{						
				float hitAngle = Mathf.Abs(Vector2.Angle(hitsStorage[i].normal, Vector2.up));		
				
				State.LateralSlopeAngle = hitAngle	;					
				
				if (hitAngle &gt; Parameters.MaximumSlopeAngle)
				{												
					if (movementDirection &lt; 0)		
						State.IsCollidingLeft=true;
					else
						State.IsCollidingRight=true;						
					
					State.SlopeAngleOK=false;
					
					if (movementDirection&lt;=0)
					{
						_newPosition.x = -Mathf.Abs(hitsStorage[i].point.x - horizontalRayCastFromBottom.x) 
							+ _rayBoundsRectangle.width/2 
								+ RayOffset*2;
					}
					else
					{						
						_newPosition.x = Mathf.Abs(hitsStorage[i].point.x - horizontalRayCastFromBottom.x) 
							- _rayBoundsRectangle.width/2 
								- RayOffset*2;						
					}			

					// if we're in the air, we prevent the character from being pushed back.
					if (!State.IsGrounded)
					{
						_newPosition.x=0;
					}		
					
					_contactList.Add(hitsStorage[i]);
					_speed = new Vector2(0, _speed.y);
					break;
				}
			}						
		}
		
		
	}

    /// &lt;summary&gt;
    /// Every frame, we cast a number of rays below our character to check for platform collisions
    /// &lt;/summary&gt;
    protected virtual void CastRaysBelow()
	{
		_friction=0;

		if (_newPosition.y &lt; -_smallValue)
		{
			State.IsFalling=true;
		}
		else
		{
			State.IsFalling = false;
		}
		
		if ((Parameters.Gravity &gt; 0) &amp;&amp; (!State.IsFalling))
			return;
		
		float rayLength = _rayBoundsRectangle.height/2 + RayOffset ; 	

		if (State.OnAMovingPlatform)
		{
			rayLength*=2;
		}	

		if (_newPosition.y&lt;0)
		{
			rayLength+=Mathf.Abs(_newPosition.y);
		}			
		
		Vector2 verticalRayCastFromLeft=new Vector2(_rayBoundsRectangle.xMin+_newPosition.x,
		                                            _rayBoundsRectangle.center.y+RayOffset);	
		Vector2 verticalRayCastToRight=new Vector2(	_rayBoundsRectangle.xMax+_newPosition.x,
		                                           _rayBoundsRectangle.center.y+RayOffset);					
		
		RaycastHit2D[] hitsStorage = new RaycastHit2D[NumberOfVerticalRays];
		float smallestDistance=_largeValue; 
		int smallestDistanceIndex=0; 						
		bool hitConnected=false; 		
		
		for (int i=0; i&lt;NumberOfVerticalRays;i++)
		{			
			Vector2 rayOriginPoint = Vector2.Lerp(verticalRayCastFromLeft,verticalRayCastToRight,(float)i/(float)(NumberOfVerticalRays-1));
			
			if ((_newPosition.y&gt;0) &amp;&amp; (!State.WasGroundedLastFrame))
				hitsStorage[i] = MMDebug.RayCast (rayOriginPoint,-(Vector2.up),rayLength,PlatformMask &amp; ~OneWayPlatformMask &amp; ~MovingOneWayPlatformMask,Color.blue,Parameters.DrawRaycastsGizmos);	
			else
				hitsStorage[i] = MMDebug.RayCast (rayOriginPoint,-(Vector2.up),rayLength,PlatformMask,Color.blue,Parameters.DrawRaycastsGizmos);					
			
			if ((Mathf.Abs(hitsStorage[smallestDistanceIndex].point.y - verticalRayCastFromLeft.y)) &lt;  _smallValue)
			{
				break;
			}		
			
			if (hitsStorage[i])
			{
				hitConnected=true;
				State.BelowSlopeAngle = Vector2.Angle( hitsStorage[i].normal, Vector2.up )  ;
				if (hitsStorage[i].distance&lt;smallestDistance)
				{
					smallestDistanceIndex=i;
					smallestDistance = hitsStorage[i].distance;
				}
			}								
		}
		if (hitConnected)
		{
			
			StandingOn=hitsStorage[smallestDistanceIndex].collider.gameObject;
		
			// if the character is jumping onto a (1-way) platform but not high enough, we do nothing
			if (
				!State.WasGroundedLastFrame 
				&amp;&amp; (smallestDistance&lt;_rayBoundsRectangle.size.y/2) 
				&amp;&amp; (
					StandingOn.layer==LayerMask.NameToLayer(&quot;OneWayPlatforms&quot;)  
					||
					StandingOn.layer==LayerMask.NameToLayer(&quot;MovingOneWayPlatforms&quot;) 
					) 
				)
			{
				State.IsCollidingBelow=false;
				return;
			}
		
			State.IsFalling=false;			
			State.IsCollidingBelow=true;
										

			// if we're applying an external force (jumping, jetpack...) we only apply that
			if (_externalForce.y&gt;0)
			{
				_newPosition.y = _speed.y * Time.deltaTime;
				State.IsCollidingBelow = false;
			}
			// if not, we just adjust the position based on the raycast hit
			else
			{
				_newPosition.y = -Mathf.Abs(hitsStorage[smallestDistanceIndex].point.y - verticalRayCastFromLeft.y) 
				+ _rayBoundsRectangle.height/2 
					+ RayOffset;
			}
			
			if (!State.WasGroundedLastFrame &amp;&amp; _speed.y&gt;0)
			{
				_newPosition.y += _speed.y * Time.deltaTime;
			}				
			
			if (Mathf.Abs(_newPosition.y)&lt;_smallValue)
				_newPosition.y = 0;

			// we check if whatever we're standing on applies a friction change
			if (hitsStorage[smallestDistanceIndex].collider.GetComponent&lt;SurfaceModifier&gt;()!=null)
			{
				_friction=hitsStorage[smallestDistanceIndex].collider.GetComponent&lt;SurfaceModifier&gt;().Friction;
			}
			
			// we check if the character is standing on a moving platform
			PathMovement movingPlatform = hitsStorage[smallestDistanceIndex].collider.GetComponent&lt;PathMovement&gt;();

			if (movingPlatform!=null &amp;&amp; State.IsGrounded)
			{
				_movingPlatform=movingPlatform;
			}
		}
		else
		{
			State.IsCollidingBelow=false;
			if(State.OnAMovingPlatform)
			{
				DetachFromMovingPlatform();
			}
		}	
	}

    /// &lt;summary&gt;
    /// If we're in the air and moving up, we cast rays above the character's head to check for collisions
    /// &lt;/summary&gt;
    protected virtual void CastRaysAbove()
	{			
		if (_newPosition.y&lt;0)
			return;
		
		float rayLength = State.IsGrounded?RayOffset : _newPosition.y*Time.deltaTime;
		rayLength+=_rayBoundsRectangle.height/2;
		
		bool hitConnected=false; 
		
		Vector2 verticalRayCastStart=new Vector2(_rayBoundsRectangle.xMin+_newPosition.x,
		                                         _rayBoundsRectangle.center.y);	
		Vector2 verticalRayCastEnd=new Vector2(	_rayBoundsRectangle.xMax+_newPosition.x,
		                                       _rayBoundsRectangle.center.y);	
		
		RaycastHit2D[] hitsStorage = new RaycastHit2D[NumberOfVerticalRays];
		float smallestDistance=_largeValue; 
		
		for (int i=0; i&lt;NumberOfVerticalRays;i++)
		{							
			Vector2 rayOriginPoint = Vector2.Lerp(verticalRayCastStart,verticalRayCastEnd,(float)i/(float)(NumberOfVerticalRays-1));
			hitsStorage[i] = MMDebug.RayCast (rayOriginPoint,(Vector2.up),rayLength,PlatformMask &amp; ~OneWayPlatformMask &amp; ~MovingOneWayPlatformMask,Color.green,Parameters.DrawRaycastsGizmos);	

			if (hitsStorage[i])
			{
				hitConnected=true;
				if (hitsStorage[i].distance&lt;smallestDistance)
				{
					smallestDistance = hitsStorage[i].distance;
				}
			}					
		}	

		if (hitConnected)
		{
			_newPosition.y = smallestDistance - _rayBoundsRectangle.height/2   ;
			
			if ( (State.IsGrounded) &amp;&amp; (_newPosition.y&lt;0) )
			{
				_newPosition.y=0;
			}
						
			State.IsCollidingAbove=true;
			
			if (!State.WasTouchingTheCeilingLastFrame)
			{
				_newPosition.x = 0;
				_newPosition.y = -0.02f;
				_speed = Vector2.zero;
			}
		}	
	}

    /// &lt;summary&gt;
    /// Creates a rectangle with the boxcollider's size for ease of use and draws debug lines along the different raycast origin axis
    /// &lt;/summary&gt;
    public virtual void SetRaysParameters() 
	{		
		
		_rayBoundsRectangle = new Rect(_boxCollider.bounds.min.x,
		                               _boxCollider.bounds.min.y,
		                               _boxCollider.bounds.size.x,
		                               _boxCollider.bounds.size.y);	


		Debug.DrawLine(new Vector2(_rayBoundsRectangle.center.x,_rayBoundsRectangle.yMin),new Vector2(_rayBoundsRectangle.center.x,_rayBoundsRectangle.yMax),Color.yellow);  
		Debug.DrawLine(new Vector2(_rayBoundsRectangle.xMin,_rayBoundsRectangle.center.y),new Vector2(_rayBoundsRectangle.xMax,_rayBoundsRectangle.center.y),Color.yellow);
		
		
		
	}
	
	
	/// &lt;summary&gt;
	/// Disables the collisions for the specified duration
	/// &lt;/summary&gt;
	/// &lt;param name=&quot;duration&quot;&gt;the duration for which the collisions must be disabled&lt;/param&gt;
	public virtual IEnumerator DisableCollisions(float duration)
	{
		// we turn the collisions off
		CollisionsOff();
		// we wait for a few seconds
		yield return new WaitForSeconds (duration);
		// we turn them on again
		CollisionsOn();
	}

	/// &lt;summary&gt;
	/// Disables the collisions with one way platforms for the specified duration
	/// &lt;/summary&gt;
	/// &lt;param name=&quot;duration&quot;&gt;the duration for which the collisions must be disabled&lt;/param&gt;
	public virtual IEnumerator DisableCollisionsWithOneWayPlatforms(float duration)
	{
		// we turn the collisions off
		CollisionsOffWithOneWayPlatforms ();
		// we wait for a few seconds
		yield return new WaitForSeconds (duration);
		// we turn them on again
		CollisionsOn();
	}

	/// &lt;summary&gt;
	/// Disables the collisions with moving platforms for the specified duration
	/// &lt;/summary&gt;
	/// &lt;param name=&quot;duration&quot;&gt;the duration for which the collisions must be disabled&lt;/param&gt;
	public virtual IEnumerator DisableCollisionsWithMovingPlatforms(float duration)
	{
		// we turn the collisions off
		CollisionsOffWithMovingPlatforms ();
		// we wait for a few seconds
		yield return new WaitForSeconds (duration);
		// we turn them on again
		CollisionsOn();
	}



	/// &lt;summary&gt;
	/// Resets the collision mask with the default settings
	/// &lt;/summary&gt;
	public virtual void CollisionsOn()
	{
		PlatformMask=_platformMaskSave;
		PlatformMask |= OneWayPlatformMask;
		PlatformMask |= MovingPlatformMask;
		PlatformMask |= MovingOneWayPlatformMask;
	}

	/// &lt;summary&gt;
	/// Turns all collisions off
	/// &lt;/summary&gt;
	public virtual void CollisionsOff()
	{
		PlatformMask=0;
	}

	/// &lt;summary&gt;
	/// Disables collisions only with the one way platform layers
	/// &lt;/summary&gt;
	public virtual void CollisionsOffWithOneWayPlatforms()
	{

		PlatformMask -= OneWayPlatformMask;
		PlatformMask -= MovingOneWayPlatformMask;
	}

	/// &lt;summary&gt;
	/// Disables collisions only with moving platform layers
	/// &lt;/summary&gt;
	public virtual void CollisionsOffWithMovingPlatforms()
	{
		PlatformMask -= MovingPlatformMask;
		PlatformMask -= MovingOneWayPlatformMask;
	}

	/// &lt;summary&gt;
	/// Resets all overridden parameters.
	/// &lt;/summary&gt;
	public virtual void ResetParameters()
	{
		_overrideParameters = DefaultParameters;
	}

	/// &lt;summary&gt;
	/// Slows the character's fall by the specified factor.
	/// &lt;/summary&gt;
	/// &lt;param name=&quot;factor&quot;&gt;Factor.&lt;/param&gt;
	public virtual void SlowFall(float factor)
	{
		_fallSlowFactor=factor;
	}

	/// &lt;summary&gt;
    /// Activates or desactivates the gravity for this character only.
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;state&quot;&gt;If set to &lt;c&gt;true&lt;/c&gt;, activates the gravity. If set to &lt;c&gt;false&lt;/c&gt;, turns it off.&lt;/param&gt;	   
	public virtual void GravityActive(bool state)
	{
		if (state)
		{
			_gravityActive = true;
		}
		else
		{
			_gravityActive = false;
		}
	}

	public virtual void ResizeCollider(Vector2 newSize)
	{
		float newYOffset =_originalColliderOffset.y -  (_originalColliderSize.y - newSize.y)/2 ;

		_boxCollider.size = newSize;
		_boxCollider.offset = newYOffset*Vector3.up;
		SetRaysParameters();
	}

	public virtual void ResetColliderSize()
	{
		_boxCollider.size = _originalColliderSize;
		_boxCollider.offset = _originalColliderOffset;
		SetRaysParameters();
	}

	public virtual bool CanGoBackToOriginalSize()
	{
		// if we're already at original size, we return true
		if (_boxCollider.size == _originalColliderSize)
		{
			return true;
		}
		float headCheckDistance = _originalColliderSize.y*transform.localScale.y ;
		bool headCheck = MMDebug.RayCast(_boxCollider.bounds.min+(Vector3.up*_smallValue),Vector2.up,headCheckDistance,PlatformMask,Color.cyan,true);
		return headCheck;
	}

    // Events


    /// &lt;summary&gt;
    /// triggered when the character's raycasts collide with something 
    /// &lt;/summary&gt;
    protected virtual void OnCorgiColliderHit() 
	{
		foreach (RaycastHit2D hit in _contactList )
		{			
			Rigidbody2D body = hit.collider.attachedRigidbody;
			if (body == null || body.isKinematic)
				return;
						
			Vector3 pushDir = new Vector3(_externalForce.x, 0, 0);
						
			body.velocity = pushDir.normalized * Parameters.Physics2DPushForce;		
		}		
	}

    /// &lt;summary&gt;
    /// triggered when the character enters a collider
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;collider&quot;&gt;the object we're colliding with.&lt;/param&gt;
    protected virtual void OnTriggerEnter2D(Collider2D collider)
	{
		
		CorgiControllerPhysicsVolume2D parameters = collider.gameObject.GetComponent&lt;CorgiControllerPhysicsVolume2D&gt;();
		if (parameters == null)
			return;
		// if the object we're colliding with has parameters, we apply them to our character.
		_overrideParameters = parameters.ControllerParameters;
	}

    /// &lt;summary&gt;
    /// triggered while the character stays inside another collider
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;collider&quot;&gt;the object we're colliding with.&lt;/param&gt;
    protected virtual void OnTriggerStay2D( Collider2D collider )
	{
	}

    /// &lt;summary&gt;
    /// triggered when the character exits a collider
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;collider&quot;&gt;the object we're colliding with.&lt;/param&gt;
    protected virtual void OnTriggerExit2D(Collider2D collider)
	{		
		CorgiControllerPhysicsVolume2D parameters = collider.gameObject.GetComponent&lt;CorgiControllerPhysicsVolume2D&gt;();
		if (parameters == null)
			return;
		
		// if the object we were colliding with had parameters, we reset our character's parameters
		_overrideParameters = null;
	}				
}
</code></pre>
<p>}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[top move]]></title>
        <id>https://Wei715547.github.io/post/top-move/</id>
        <link href="https://Wei715547.github.io/post/top-move/">
        </link>
        <updated>2020-03-05T10:10:18.000Z</updated>
        <summary type="html"><![CDATA[<p>using System.Collections;<br>
using System.Collections.Generic;<br>
using UnityEngine;</p>
<p>public class Player : MonoBehaviour<br>
{<br>
public float moveSpeed = 3;//属性值<br>
private SpriteRenderer sr;//引用<br>
private void Awake()<br>
{<br>
sr = GetComponent<SpriteRenderer>();<br>
}<br>
public Sprite[] tankSprite;//上，右，下，左。</p>
<pre><code>// Start is called before the first frame update
void Start()
{
    
}

// Update is called once per frame
void Update()
{

}
private void FixedUpdate()
{
</code></pre>
]]></summary>
        <content type="html"><![CDATA[<p>using System.Collections;<br>
using System.Collections.Generic;<br>
using UnityEngine;</p>
<p>public class Player : MonoBehaviour<br>
{<br>
public float moveSpeed = 3;//属性值<br>
private SpriteRenderer sr;//引用<br>
private void Awake()<br>
{<br>
sr = GetComponent<SpriteRenderer>();<br>
}<br>
public Sprite[] tankSprite;//上，右，下，左。</p>
<pre><code>// Start is called before the first frame update
void Start()
{
    
}

// Update is called once per frame
void Update()
{

}
private void FixedUpdate()
{
</code></pre>
<!-- more -->
<pre><code>    Move();

   
}//移动方法

private void Move()
{
    float v = Input.GetAxisRaw(&quot;Vertical&quot;);
    transform.Translate(Vector3.up * v * moveSpeed * Time.deltaTime, Space.World);
    if (v &lt; 0)
    {
        sr.sprite = tankSprite[2];
    }
    else if (v &gt; 0)
    {
        sr.sprite = tankSprite[0];
    }
    if (v != 0)
    {
        return;
    }


    float h = Input.GetAxisRaw(&quot;Horizontal&quot;);
    transform.Translate(Vector3.right * h * moveSpeed * Time.deltaTime, Space.World);
    if (h &lt; 0)
    {
        sr.sprite = tankSprite[3];
    }
    else if (h &gt; 0)
    {
        sr.sprite = tankSprite[1];
    }
}
</code></pre>
<p>}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://Wei715547.github.io/post/hello-gridea/</id>
        <link href="https://Wei715547.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>