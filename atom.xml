<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Wei715547.github.io</id>
    <title>Weiwei的个人网站</title>
    <updated>2020-05-09T08:18:47.144Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Wei715547.github.io"/>
    <link rel="self" href="https://Wei715547.github.io/atom.xml"/>
    <subtitle>7</subtitle>
    <logo>https://Wei715547.github.io/images/avatar.png</logo>
    <icon>https://Wei715547.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Weiwei的个人网站</rights>
    <entry>
        <title type="html"><![CDATA[SendMessage]]></title>
        <id>https://Wei715547.github.io/post/sendmessage/</id>
        <link href="https://Wei715547.github.io/post/sendmessage/">
        </link>
        <updated>2020-05-09T08:16:59.000Z</updated>
        <content type="html"><![CDATA[<p>private void OnCollisionEnter2D(Collision2D collision)<br>
{<br>
if (collision.gameObject.tag == &quot;Enm&quot;)<br>
{<br>
Enemis eni = collision.gameObject.GetComponent<Enemis>();<br>
if (ani.GetBool(&quot;Down&quot;))<br>
{<br>
eni.Died();</p>
<pre><code>            //collision.gameObject.SendMessage(&quot;Dide&quot;);

            /*FrogRangAI frog =                        collision.gameObject.GetComponent&lt;FrogRangAI&gt;();
            frog.Died();*/
            
            AddUpForce();
        }</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Unity面试易考题-问题]]></title>
        <id>https://Wei715547.github.io/post/unity-mian-shi-yi-kao-ti-wen-ti/</id>
        <link href="https://Wei715547.github.io/post/unity-mian-shi-yi-kao-ti-wen-ti/">
        </link>
        <updated>2020-05-09T05:22:15.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://Wei715547.github.io/post-images/1589001744941.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Unity面试易考题-基本框架]]></title>
        <id>https://Wei715547.github.io/post/unity-mian-shi-yi-kao-ti-ji-ben-kuang-jia/</id>
        <link href="https://Wei715547.github.io/post/unity-mian-shi-yi-kao-ti-ji-ben-kuang-jia/">
        </link>
        <updated>2020-05-09T05:17:15.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://Wei715547.github.io/post-images/1589001472730.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Unity面试易考题-数据结构]]></title>
        <id>https://Wei715547.github.io/post/unity-mian-shi-yi-kao-ti-shu-ju-jie-gou/</id>
        <link href="https://Wei715547.github.io/post/unity-mian-shi-yi-kao-ti-shu-ju-jie-gou/">
        </link>
        <updated>2020-05-09T05:14:10.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://Wei715547.github.io/post-images/1589001324001.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Unity面试易考题-排序]]></title>
        <id>https://Wei715547.github.io/post/unity-mian-shi-yi-kao-ti-pai-xu/</id>
        <link href="https://Wei715547.github.io/post/unity-mian-shi-yi-kao-ti-pai-xu/">
        </link>
        <updated>2020-05-09T05:11:43.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://Wei715547.github.io/post-images/1589001203393.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Unity面试易考题 - C#相关]]></title>
        <id>https://Wei715547.github.io/post/unity-mian-shi-yi-kao-ti-cxiang-guan/</id>
        <link href="https://Wei715547.github.io/post/unity-mian-shi-yi-kao-ti-cxiang-guan/">
        </link>
        <updated>2020-05-09T04:56:31.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://Wei715547.github.io/post-images/1589000914635.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[提取共有属性/方法]]></title>
        <id>https://Wei715547.github.io/post/ti-qu-gong-you-shu-xing-fang-fa/</id>
        <link href="https://Wei715547.github.io/post/ti-qu-gong-you-shu-xing-fang-fa/">
        </link>
        <updated>2020-05-08T14:42:30.000Z</updated>
        <content type="html"><![CDATA[<p>using System.Collections;<br>
using System.Collections.Generic;<br>
using UnityEngine;</p>
<p>public class Enemis : MonoBehaviour<br>
{<br>
protected Animator ani;<br>
protected CircleCollider2D cl;<br>
// Start is called before the first frame update<br>
protected virtual void Start()<br>
{<br>
ani = GetComponent<Animator>();<br>
cl = GetComponent<CircleCollider2D>();<br>
}</p>
<pre><code>public void Died()
{
    ani.SetTrigger(&quot;Died&quot;);
    cl.enabled = false;
}

public void D()
{
    Destroy(gameObject);
}
</code></pre>
<p>}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[刚体-Add-Force]]></title>
        <id>https://Wei715547.github.io/post/gang-ti-add-force/</id>
        <link href="https://Wei715547.github.io/post/gang-ti-add-force/">
        </link>
        <updated>2020-05-08T04:56:47.000Z</updated>
        <content type="html"><![CDATA[<p>using System.Collections;<br>
using System.Collections.Generic;<br>
using UnityEngine;</p>
<p>public class AddForce : MonoBehaviour<br>
{<br>
public ForceMode f;<br>
private Rigidbody r;<br>
public float Rtspeed = 1000;<br>
private void OnMouseDown()<br>
{<br>
r.AddForce(Vector3 .right  * 500, f );//世界坐标系添加力，给世界方向 =&gt; 世界方向<br>
//r.AddForce(transform .right * 500, f);//世界坐标系添加力，给自身方向 =&gt; 自身方向<br>
//r.AddRelativeForce(Vector3.right * 500,f);//自身坐标系添加力，给世界方向 =&gt; 自身方向<br>
//r.AddRelativeForce(transform .right * 500, f);//无效果的错误使用<br>
r.useGravity = true;<br>
}</p>
<pre><code>// Start is called before the first frame update
void Start()
{
    r = transform.GetComponent&lt;Rigidbody&gt;();
}

// Update is called once per frame
void FixedUpdate()
{
    float h = Input.GetAxis(&quot;Horizontal&quot;);
    float v = Input.GetAxis(&quot;Vertical&quot;);

    r.AddTorque(transform.up * v*Rtspeed );
    r.AddTorque(Vector3 .right * h*100);
    
    //使用刚体组件移动
   if (Input.GetKey(KeyCode.Z))
    {
        //每帧移动固定距离
        r.MovePosition(transform.position + Vector3 .left *0.2f);

        //添加在方向上（自身/世界）添加固定加速度
        //r.velocity = new Vector3(h*speed*Time.deltaTime,0 ,0);
        //r.velocity = transform .forward  * 3;
    }



}
</code></pre>
<p>}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[接口-简单案例]]></title>
        <id>https://Wei715547.github.io/post/jie-kou-jian-dan-an-li/</id>
        <link href="https://Wei715547.github.io/post/jie-kou-jian-dan-an-li/">
        </link>
        <updated>2020-05-06T12:01:05.000Z</updated>
        <content type="html"><![CDATA[<p>using System;<br>
using System.Collections.Generic;<br>
using System.Text;</p>
<p>namespace 接口<br>
{<br>
class UDisk : IUSB<br>
{<br>
/// <summary><br>
/// 存储内容<br>
/// </summary><br>
private string content;</p>
<pre><code>    public void Read()
    {
        Console.WriteLine(content);
    }

    public void Write(string s)
    {
        content = s;
    }
}
</code></pre>
<p>}</p>
<p>using System;<br>
using System.Collections.Generic;<br>
using System.Text;</p>
<p>namespace 接口<br>
{<br>
class UDisk : IUSB<br>
{<br>
/// <summary><br>
/// 存储内容<br>
/// </summary><br>
private string content;</p>
<pre><code>    public void Read()
    {
        Console.WriteLine(content);
    }

    public void Write(string s)
    {
        content = s;
    }
}
</code></pre>
<p>}</p>
<p>using System;<br>
using System.Collections.Generic;<br>
using System.Text;</p>
<p>namespace 接口<br>
{<br>
class HardDisk:IUSB<br>
{<br>
private string content;</p>
<pre><code>    public void Read()
    {
        Console.WriteLine(content);
    }

    public void Write(string s)
    {
        content = s;
    }
}
</code></pre>
<p>}</p>
<p>//程序<br>
using System;</p>
<p>namespace 接口<br>
{</p>
<pre><code>class Program
{
    static void Main(string[] args)
    {
        UDisk u1 = new UDisk();
        u1.Write(&quot;Wei的U盘&quot;);
        u1.Read();

        HardDisk h = new HardDisk();
        h.Write(&quot;Wei的硬盘&quot;);
        h.Read();
    }
}
</code></pre>
<p>}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[多态（3）接口（多继承接口，提供“大量”特殊功能）]]></title>
        <id>https://Wei715547.github.io/post/duo-tai-3jie-kou-duo-ji-cheng-jie-kou-ti-gong-te-shu-gong-neng/</id>
        <link href="https://Wei715547.github.io/post/duo-tai-3jie-kou-duo-ji-cheng-jie-kou-ti-gong-te-shu-gong-neng/">
        </link>
        <updated>2020-05-06T11:54:33.000Z</updated>
        <content type="html"><![CDATA[<p>using System;<br>
using System.Collections.Generic;<br>
using System.Text;</p>
<p>namespace 接口<br>
{<br>
//Interface 没有class关键字 一般使用&quot;IXxxx&quot;命名书写</p>
<pre><code>/// &lt;summary&gt;
/// 注意事项
/// 1.接口中所有方法都是抽象方法，所有接口不能被实例化
/// 2.一个类可以实现多个接口，被实现的接口之间用”逗号，“隔开
/// 3.一个接口可以继承多个接口（类只能单继承），接口之间也用逗号分隔
/// &lt;/summary&gt;

interface IFly
{
    //接口中不能包含“字段”
    //private string s;

    //但可以包含属性--(自动属性）
    //public string Id { get; set; }
    //string Id { get; set; }

    //接口中的方法不能有“方法体”，全部都是抽象方法，但不需要abstract修饰。
    void Fly();

    //public void Hello();
    //接口中的成员不允许添加访问修饰符，默认全是public。



}
</code></pre>
<p>}</p>
<p>using System;<br>
using System.Collections.Generic;<br>
using System.Text;</p>
<p>namespace 接口<br>
{<br>
class Car<br>
{<br>
private string brand;</p>
<pre><code>    public string Brand
    {
        get { return brand; }
        set { brand = value; }
    }

    /*public Car()
    {

    }*/

    public Car (string brand)
    {
        this.brand = brand;
    }

    public void Run()
    {
        Console.WriteLine(&quot;{0}品牌的汽车在奔跑&quot;, brand );
    }
}
</code></pre>
<p>}</p>
<p>using System;<br>
using System.Collections.Generic;<br>
using System.Text;</p>
<p>namespace 接口<br>
{</p>
<pre><code>class Batmobile:Car ,IFly   //接口（为子类提供父类没有的“附加功能”。
{
    public Batmobile(string brand) : base(brand)
    {

    }

    public void Fly()
    {
        Console.WriteLine(&quot;{0}正在飞行&quot;, base.Brand);
    }
}
</code></pre>
<p>}</p>
<p>//程序<br>
using System;</p>
<p>namespace 接口<br>
{</p>
<pre><code>class Program
{
    static void Main(string[] args)
    {
        BMWCar c1 = new BMWCar(&quot;750&quot;);
        c1.Run();

        Batmobile bat = new Batmobile(&quot;BatMan&quot;);
        bat.Run();
        bat.Fly();
    }
}
</code></pre>
<p>}</p>
]]></content>
    </entry>
</feed>