<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Wei715547.github.io</id>
    <title>Weiwei的个人网站</title>
    <updated>2020-05-01T09:35:22.888Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Wei715547.github.io"/>
    <link rel="self" href="https://Wei715547.github.io/atom.xml"/>
    <subtitle>7</subtitle>
    <logo>https://Wei715547.github.io/images/avatar.png</logo>
    <icon>https://Wei715547.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Weiwei的个人网站</rights>
    <entry>
        <title type="html"><![CDATA[静态]]></title>
        <id>https://Wei715547.github.io/post/jing-tai/</id>
        <link href="https://Wei715547.github.io/post/jing-tai/">
        </link>
        <updated>2020-05-01T09:34:55.000Z</updated>
        <content type="html"><![CDATA[<p>using System;<br>
using System.Collections.Generic;<br>
using System.Text;</p>
<p>namespace 继承_static_结构体_2048核心类<br>
{<br>
class Student : Person<br>
{<br>
//prop +tab +tab 自动属性快捷生成<br>
/// <summary><br>
/// 成绩<br>
/// </summary></p>
<pre><code>    // 实例成员属于   对象    静态成员属于   类

    public int Score { get; set; }

    //每个对象都存储一份
    public int InstanceCount;

    

    //静态字段 仅仅存储一份 所有对象共享 常驻内存中
    public static int StaticCount;

    private Random random;
    private int[] arr;

    //实例构造函数：提供创建对象的方式，初始化类的实例数据成员
    //
    public Student()
    {
        random = new Random();
        arr = new int[5];
        InstanceCount++;
        StaticCount++;
    }

    //静态构造函数 不需要访问修饰符 都可以访问
    //作用：初始化类的静态数据成员
    //执行时机：类加载时调用一次
    static Student()
    {
        //InstanceCount++;//”非静态字段 要求 对象引用 ”  静态代码块只能访问静态成员
        StaticCount++;
    }

    //静态方法 
    public static void Fun1()
    {
        //Console.WriteLine(InstanceCount);//静态方法只能访问静态成员
    }

    public  void Fun2()
    {
        Console.WriteLine(InstanceCount);// 通过引用(对象 / 实例)调用实例方法，都会自动传递(对象 / 实例的)引用   
        //Console.WriteLine(this.InstanceCount);//所以可以访问 InstanceCount 实例成员
        Console.WriteLine(StaticCount );//但实例（对象）方法可以访问静态成员（类）
    }

    //静态类
    /*不能实例化，只能包含静态成员
     * 静态类不能被继承，但非静态类的方法，属性都可以被继承
     */


    /* 静态适用
    * 利：单独空间存储，所有对象共享，可直接被类名调用
    * 弊：静态方法中只能访问静态成员，共享数据被多个对象访问时会出现并发。
    * 适用场合：
    * 1.所有对象需要共享的数据。
    * 2.在没有对象是就要访问成员。
    * 3.工具类适合做静态类（常用，不需要过多数据）。
    * 如类 Math.方法
    *      unuty中有静态类Random
    *      Random.randuoRange(1,101); （randomRange()静态类Random的静态方法。
    *      简易与.Net中
    *      Random r = new Random();
    *      random.Next(1,101);（Next()实例（对象）方法。
    *      
    */
    //



}
</code></pre>
<p>}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[DoTweening完成后执行]]></title>
        <id>https://Wei715547.github.io/post/dotweening-wan-cheng-hou-zhi-xing/</id>
        <link href="https://Wei715547.github.io/post/dotweening-wan-cheng-hou-zhi-xing/">
        </link>
        <updated>2020-05-01T03:46:49.000Z</updated>
        <content type="html"><![CDATA[<p>private void Close()<br>
{<br>
EventCenter.Broadcast(EventDefine.PlayBuyyonSound);<br>
bg.GetComponent<Image>().DOColor(new Color(bg.GetComponent<Image>().color.r, bg.GetComponent<Image>().color.g, bg.GetComponent<Image>().color.b, 0), 0.3f);<br>
rankt.transform.DOScale(Vector3.zero, 0.3f).OnComplete(() =&gt;<br>
{<br>
gameObject.SetActive(false);<br>
});<br>
}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[EventSystems，屏幕拖拽]]></title>
        <id>https://Wei715547.github.io/post/eventsystemsping-mu-tuo-zhuai/</id>
        <link href="https://Wei715547.github.io/post/eventsystemsping-mu-tuo-zhuai/">
        </link>
        <updated>2020-05-01T03:22:17.000Z</updated>
        <content type="html"><![CDATA[<p>using System.Collections;<br>
using System.Collections.Generic;<br>
using UnityEngine;<br>
using UnityEngine.EventSystems;<br>
public class DIalogDrag : MonoBehaviour, IPointerDownHandler,IDragHandler,IPointerClickHandler<br>
{<br>
private RectTransform parentRTF;<br>
private void Start()<br>
{<br>
//设置UI长宽<br>
RectTransform rtf = GetComponent<RectTransform>();<br>
rtf.SetSizeWithCurrentAnchors(RectTransform.Axis.Horizontal, 700);<br>
rtf.SetSizeWithCurrentAnchors(RectTransform.Axis.Vertical, 400);</p>
<pre><code>    parentRTF = this.transform.parent as RectTransform;
}
private Vector3 siftVector;
//按下时执行
public void OnPointerDown(PointerEventData eventData)
{
    //记录按下点到中心点偏移量

    Vector3 wordPoint;
    //屏幕坐标--&gt;世界坐标
    //(父物体的变换组件，屏幕坐标，摄像机，out 世界坐标)
    RectTransformUtility.ScreenPointToWorldPointInRectangle(parentRTF, eventData.position, eventData.pressEventCamera, out wordPoint);
    siftVector = this.transform.position - wordPoint;
}
//拖拽时执行
public void OnDrag(PointerEventData eventData)
{
    Vector3 wordPoint;
    //屏幕坐标--&gt;世界坐标
    //(父物体的变换组件，屏幕坐标，摄像机，out 世界坐标)
    RectTransformUtility.ScreenPointToWorldPointInRectangle(parentRTF, eventData.position, eventData.pressEventCamera, out wordPoint);
    this.transform.position = wordPoint + siftVector ;
    
}

public void OnPointerClick(PointerEventData eventData)
{
    if (eventData.clickCount == 2)
        Destroy (this .gameObject );
}
</code></pre>
<p>}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[游戏数据类创建，储存、读取]]></title>
        <id>https://Wei715547.github.io/post/you-xi-shu-ju-lei-chuang-jian-chu-cun-du-qu/</id>
        <link href="https://Wei715547.github.io/post/you-xi-shu-ju-lei-chuang-jian-chu-cun-du-qu/">
        </link>
        <updated>2020-04-24T03:45:01.000Z</updated>
        <content type="html"><![CDATA[<p>using System.Collections;<br>
using System.Collections.Generic;<br>
using UnityEngine;</p>
<p>[System .Serializable]<br>
public class GameDate<br>
{<br>
public  static bool IsAgainGame =false ;</p>
<pre><code>private bool isFirstGame;
private bool isMusicOn;

private int[] bestScoreArr;

private int selectSkin;
private bool[] skinUnlocked;
private int diamondCount;


public void SetIsFirstGame(bool isFirstGame)
{
    this.isFirstGame = isFirstGame;
}

public void SetMusicOn(bool isMusicOn)
{
    this.isMusicOn = isMusicOn;
}

public void SetBestScoreArr(int[] bestScoreArr)
{
    this.bestScoreArr = bestScoreArr;
}

public void SetSelectSkin(int  selectSkin)
{
    this.selectSkin = selectSkin;
}

public void SetSkinUnlocked(bool [] skinUnlocked)
{
    this.skinUnlocked = skinUnlocked;
}

public void SetDiamondCount (int diamondCount)
{
    this.diamondCount = diamondCount;
}



public bool  GetIsFirstGame()
{
    return isFirstGame;
}

public bool GetMusicOn()
{
    return isMusicOn ;
}

public int [] GetBestScoreArr()
{
    return bestScoreArr;
}

public int GetSelectSkin()
{
    return selectSkin;
}

public bool [] GetUnlockedSkin()
{
    return skinUnlocked;
}

public int GetDiamongCount()
{
    return diamondCount;
}
</code></pre>
<p>}</p>
<pre><code>/// &lt;summary&gt;
/// 储存数据
/// &lt;/summary&gt;
private void Save()
{
    try
    {
        BinaryFormatter bf = new BinaryFormatter();
        using (FileStream fs = File.Create(Application.persistentDataPath + &quot;/DameData.data&quot;))

        {
            data.SetBestScoreArr(bestScoreArr);
            data.SetDiamondCount(diamondCount);
            data.SetIsFirstGame(isFirstGame);
            data.SetMusicOn(isMusicOn);
            data.SetSelectSkin(selectSkin);
            data.SetSkinUnlocked(skinUnlocked);
            bf.Serialize(fs, data);

        }
    }
    catch (System.Exception e)
    {
        Debug.Log(e.Message);

    }
}
/// &lt;summary&gt;
/// 读取数据
/// &lt;/summary&gt;
private void Read()
{
    try
    {
        BinaryFormatter bf = new BinaryFormatter();
        using (FileStream fs = File .Open (Application.persistentDataPath + &quot;/DameData.data&quot;,FileMode.Open ))
        {
            data = (GameDate )bf.Deserialize(fs);
        }
    }
    catch (System.Exception e)
    {
        Debug.Log(e.Message);
    }
}
</code></pre>
<p>//初始化<br>
public void ResetData()<br>
{<br>
isFirstGame = false;<br>
isMusicOn = true;<br>
bestScoreArr = new int[3];<br>
selectSkin = 0;<br>
skinUnlocked = new bool[vars.skinSpriteList.Count];<br>
skinUnlocked[0] = true;<br>
diamondCount = 10;</p>
<pre><code>    data = new GameDate();//初始化时读取

    Save();
}
</code></pre>
<p>}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[EvenCenter(监听/移除监听/广播）]]></title>
        <id>https://Wei715547.github.io/post/evencenterjian-ting-yi-chu-jian-ting-guang-bo/</id>
        <link href="https://Wei715547.github.io/post/evencenterjian-ting-yi-chu-jian-ting-guang-bo/">
        </link>
        <updated>2020-04-21T04:27:13.000Z</updated>
        <content type="html"><![CDATA[<p>using System;<br>
using System.Collections;<br>
using System.Collections.Generic;<br>
using UnityEngine;</p>
<p>public class EventCenter<br>
{<br>
private static Dictionary&lt;EventDefine, Delegate&gt; m_EventTable = new Dictionary&lt;EventDefine, Delegate&gt;();</p>
<pre><code>private static void OnListenerAdding(EventDefine eventType, Delegate callBack)
{
    if (!m_EventTable.ContainsKey(eventType))
    {
        m_EventTable.Add(eventType, null);
    }
    Delegate d = m_EventTable[eventType];
    if (d != null &amp;&amp; d.GetType() != callBack.GetType())
    {
        throw new Exception(string.Format(&quot;尝试为事件{0}添加不同类型的委托，当前事件所对应的委托是{1}，要添加的委托类型为{2}&quot;, eventType, d.GetType(), callBack.GetType()));
    }
}
private static void OnListenerRemoving(EventDefine eventType, Delegate callBack)
{
    if (m_EventTable.ContainsKey(eventType))
    {
        Delegate d = m_EventTable[eventType];
        if (d == null)
        {
            throw new Exception(string.Format(&quot;移除监听错误：事件{0}没有对应的委托&quot;, eventType));
        }
        else if (d.GetType() != callBack.GetType())
        {
            throw new Exception(string.Format(&quot;移除监听错误：尝试为事件{0}移除不同类型的委托，当前委托类型为{1}，要移除的委托类型为{2}&quot;, eventType, d.GetType(), callBack.GetType()));
        }
    }
    else
    {
        throw new Exception(string.Format(&quot;移除监听错误：没有事件码{0}&quot;, eventType));
    }
}
private static void OnListenerRemoved(EventDefine eventType)
{
    if (m_EventTable[eventType] == null)
    {
        m_EventTable.Remove(eventType);
    }
}
//no parameters
public static void AddListener(EventDefine eventType, CallBack callBack)
{
    OnListenerAdding(eventType, callBack);
    m_EventTable[eventType] = (CallBack)m_EventTable[eventType] + callBack;
}
//Single parameters
public static void AddListener&lt;T&gt;(EventDefine eventType, CallBack&lt;T&gt; callBack)
{
    OnListenerAdding(eventType, callBack);
    m_EventTable[eventType] = (CallBack&lt;T&gt;)m_EventTable[eventType] + callBack;
}
//two parameters
public static void AddListener&lt;T, X&gt;(EventDefine eventType, CallBack&lt;T, X&gt; callBack)
{
    OnListenerAdding(eventType, callBack);
    m_EventTable[eventType] = (CallBack&lt;T, X&gt;)m_EventTable[eventType] + callBack;
}
//three parameters
public static void AddListener&lt;T, X, Y&gt;(EventDefine eventType, CallBack&lt;T, X, Y&gt; callBack)
{
    OnListenerAdding(eventType, callBack);
    m_EventTable[eventType] = (CallBack&lt;T, X, Y&gt;)m_EventTable[eventType] + callBack;
}
//four parameters
public static void AddListener&lt;T, X, Y, Z&gt;(EventDefine eventType, CallBack&lt;T, X, Y, Z&gt; callBack)
{
    OnListenerAdding(eventType, callBack);
    m_EventTable[eventType] = (CallBack&lt;T, X, Y, Z&gt;)m_EventTable[eventType] + callBack;
}
//five parameters
public static void AddListener&lt;T, X, Y, Z, W&gt;(EventDefine eventType, CallBack&lt;T, X, Y, Z, W&gt; callBack)
{
    OnListenerAdding(eventType, callBack);
    m_EventTable[eventType] = (CallBack&lt;T, X, Y, Z, W&gt;)m_EventTable[eventType] + callBack;
}

//no parameters
public static void RemoveListener(EventDefine eventType, CallBack callBack)
{
    OnListenerRemoving(eventType, callBack);
    m_EventTable[eventType] = (CallBack)m_EventTable[eventType] - callBack;
    OnListenerRemoved(eventType);
}
//single parameters
public static void RemoveListener&lt;T&gt;(EventDefine eventType, CallBack&lt;T&gt; callBack)
{
    OnListenerRemoving(eventType, callBack);
    m_EventTable[eventType] = (CallBack&lt;T&gt;)m_EventTable[eventType] - callBack;
    OnListenerRemoved(eventType);
}
//two parameters
public static void RemoveListener&lt;T, X&gt;(EventDefine eventType, CallBack&lt;T, X&gt; callBack)
{
    OnListenerRemoving(eventType, callBack);
    m_EventTable[eventType] = (CallBack&lt;T, X&gt;)m_EventTable[eventType] - callBack;
    OnListenerRemoved(eventType);
}
//three parameters
public static void RemoveListener&lt;T, X, Y&gt;(EventDefine eventType, CallBack&lt;T, X, Y&gt; callBack)
{
    OnListenerRemoving(eventType, callBack);
    m_EventTable[eventType] = (CallBack&lt;T, X, Y&gt;)m_EventTable[eventType] - callBack;
    OnListenerRemoved(eventType);
}
//four parameters
public static void RemoveListener&lt;T, X, Y, Z&gt;(EventDefine eventType, CallBack&lt;T, X, Y, Z&gt; callBack)
{
    OnListenerRemoving(eventType, callBack);
    m_EventTable[eventType] = (CallBack&lt;T, X, Y, Z&gt;)m_EventTable[eventType] - callBack;
    OnListenerRemoved(eventType);
}
//five parameters
public static void RemoveListener&lt;T, X, Y, Z, W&gt;(EventDefine eventType, CallBack&lt;T, X, Y, Z, W&gt; callBack)
{
    OnListenerRemoving(eventType, callBack);
    m_EventTable[eventType] = (CallBack&lt;T, X, Y, Z, W&gt;)m_EventTable[eventType] - callBack;
    OnListenerRemoved(eventType);
}


//no parameters
public static void Broadcast(EventDefine eventType)
{
    Delegate d;
    if (m_EventTable.TryGetValue(eventType, out d))
    {
        CallBack callBack = d as CallBack;
        if (callBack != null)
        {
            callBack();
        }
        else
        {
            throw new Exception(string.Format(&quot;广播事件错误：事件{0}对应委托具有不同的类型&quot;, eventType));
        }
    }
}
//single parameters
public static void Broadcast&lt;T&gt;(EventDefine eventType, T arg)
{
    Delegate d;
    if (m_EventTable.TryGetValue(eventType, out d))
    {
        CallBack&lt;T&gt; callBack = d as CallBack&lt;T&gt;;
        if (callBack != null)
        {
            callBack(arg);
        }
        else
        {
            throw new Exception(string.Format(&quot;广播事件错误：事件{0}对应委托具有不同的类型&quot;, eventType));
        }
    }
}
//two parameters
public static void Broadcast&lt;T, X&gt;(EventDefine eventType, T arg1, X arg2)
{
    Delegate d;
    if (m_EventTable.TryGetValue(eventType, out d))
    {
        CallBack&lt;T, X&gt; callBack = d as CallBack&lt;T, X&gt;;
        if (callBack != null)
        {
            callBack(arg1, arg2);
        }
        else
        {
            throw new Exception(string.Format(&quot;广播事件错误：事件{0}对应委托具有不同的类型&quot;, eventType));
        }
    }
}
//three parameters
public static void Broadcast&lt;T, X, Y&gt;(EventDefine eventType, T arg1, X arg2, Y arg3)
{
    Delegate d;
    if (m_EventTable.TryGetValue(eventType, out d))
    {
        CallBack&lt;T, X, Y&gt; callBack = d as CallBack&lt;T, X, Y&gt;;
        if (callBack != null)
        {
            callBack(arg1, arg2, arg3);
        }
        else
        {
            throw new Exception(string.Format(&quot;广播事件错误：事件{0}对应委托具有不同的类型&quot;, eventType));
        }
    }
}
//four parameters
public static void Broadcast&lt;T, X, Y, Z&gt;(EventDefine eventType, T arg1, X arg2, Y arg3, Z arg4)
{
    Delegate d;
    if (m_EventTable.TryGetValue(eventType, out d))
    {
        CallBack&lt;T, X, Y, Z&gt; callBack = d as CallBack&lt;T, X, Y, Z&gt;;
        if (callBack != null)
        {
            callBack(arg1, arg2, arg3, arg4);
        }
        else
        {
            throw new Exception(string.Format(&quot;广播事件错误：事件{0}对应委托具有不同的类型&quot;, eventType));
        }
    }
}
//five parameters
public static void Broadcast&lt;T, X, Y, Z, W&gt;(EventDefine eventType, T arg1, X arg2, Y arg3, Z arg4, W arg5)
{
    Delegate d;
    if (m_EventTable.TryGetValue(eventType, out d))
    {
        CallBack&lt;T, X, Y, Z, W&gt; callBack = d as CallBack&lt;T, X, Y, Z, W&gt;;
        if (callBack != null)
        {
            callBack(arg1, arg2, arg3, arg4, arg5);
        }
        else
        {
            throw new Exception(string.Format(&quot;广播事件错误：事件{0}对应委托具有不同的类型&quot;, eventType));
        }
    }
}
</code></pre>
<p>}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[创建资源类]]></title>
        <id>https://Wei715547.github.io/post/chuang-jian-zi-yuan-lei/</id>
        <link href="https://Wei715547.github.io/post/chuang-jian-zi-yuan-lei/">
        </link>
        <updated>2020-04-15T12:34:57.000Z</updated>
        <content type="html"><![CDATA[<p>using System.Collections;<br>
using System.Collections.Generic;<br>
using UnityEngine;</p>
<p>//[CreateAssetMenu (menuName = &quot;CreatManagerVarsContainer&quot;)]<br>
public class ManagerVars : ScriptableObject<br>
{<br>
public static ManagerVars GetManagerVars()<br>
{<br>
return Resources.Load<ManagerVars>(&quot;ManageVarContain&quot;);<br>
}<br>
public List<Sprite> BGThemSpriteList = new List<Sprite>();<br>
public GameObject noamlPlatform;<br>
public GameObject characterPre;<br>
public float nettXPos = 0.554f, nextYPos = 0.645f;<br>
}</p>
<p>调用方法<br>
private ManagerVars vars;<br>
private void Start()<br>
{<br>
vars = ManagerVars.GetManagerVars();<br>
}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[碰撞，触发]]></title>
        <id>https://Wei715547.github.io/post/peng-zhuang-hong-fa/</id>
        <link href="https://Wei715547.github.io/post/peng-zhuang-hong-fa/">
        </link>
        <updated>2020-04-13T04:29:47.000Z</updated>
        <content type="html"><![CDATA[<pre><code>//都有碰撞器组件
//运动的物体有刚体组件
private void OnCollisionEnter(Collision other )
{
    print(other.collider.name);
    
}


//都有碰撞器组件
//其中一个勾选IsTriggger
//其中一个有刚体组件
private void OnTriggerEnter(Collider other)//触发开始执行 other碰撞到的物体
{
    
    float a = other.GetComponent&lt;Enemy&gt;().Hp;
    print(other.name+a);
    other.GetComponent&lt;Enemy&gt;().Hp -= Random .Range (5,10);
    print(other.name + other.GetComponent&lt;Enemy&gt;().Hp);
    
}

private void OnTriggerStay(Collider other)//触发后每帧执行
{
    other.GetComponent&lt;MeshRenderer&gt;().material.color = Color.red;
    if (other.GetComponent&lt;Enemy&gt;().Hp &lt;= 0)
        Destroy(other.gameObject);
}

private void OnTriggerExit(Collider other)//触发结束时执行
{
    other.GetComponent&lt;MeshRenderer&gt;().material.color = Color.white;
}</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2D Jump]]></title>
        <id>https://Wei715547.github.io/post/2d-jump/</id>
        <link href="https://Wei715547.github.io/post/2d-jump/">
        </link>
        <updated>2020-04-12T05:00:07.000Z</updated>
        <content type="html"><![CDATA[<p>using System.Collections;<br>
using System.Collections.Generic;<br>
using UnityEngine;</p>
<p>public class JumpBox : MonoBehaviour<br>
{<br>
[Range(0, 10)] public float jumpVelocity = 5f;<br>
public LayerMask mask;<br>
public float boxHeight;<br>
private Vector2 playerSize;<br>
private Vector2 boxSize;<br>
private bool jumpRequest;<br>
private bool grounded;<br>
public float fallMultiplier = 2.5f;<br>
public float LowJumpMultiplier = 2f;<br>
private Rigidbody2D _rigidbody2D;</p>
<pre><code>// Start is called before the first frame update
void Start()
{
    _rigidbody2D = GetComponent&lt;Rigidbody2D&gt;();
    playerSize = GetComponent&lt;SpriteRenderer&gt;().bounds.size;
    boxSize = new Vector2(playerSize.x * 0.8f, boxHeight);

}

// Update is called once per frame
void Update()
{
    if (Input.GetButtonDown(&quot;Jump&quot;) &amp;&amp; grounded)
    {
        jumpRequest = true;
    }
}
private void FixedUpdate()
{
    //自然重力
    Gud();

    if (jumpRequest)
    {
        _rigidbody2D.AddForce(Vector2.up * jumpVelocity, ForceMode2D.Impulse);
        jumpRequest = false;
        grounded = false;
    }
    else
    {
        Vector2 boxCenter = (Vector2)transform.position + (Vector2.down * playerSize.y * 0.5f);
        if (Physics2D.OverlapBox(boxCenter, boxSize, 0, mask) != null)
        {
            grounded = true;
        }
        else
        {
            grounded = false;
        }
    }
}

private void Gud()
{
    if (_rigidbody2D.velocity.y &lt; 0)
    {
        _rigidbody2D.gravityScale = fallMultiplier;
    }
    else if (_rigidbody2D.velocity.y &gt; 0 &amp;&amp; !Input.GetButton(&quot;Jump&quot;))
    {
        _rigidbody2D.gravityScale = LowJumpMultiplier;
    }
    else
    {
        _rigidbody2D.gravityScale = 1f;
    }
}

private void OnDrawGizmos()
{
    if (grounded)
    {
        Gizmos.color = Color.red;
    }
    else
    {
        Gizmos.color = Color.green;
    }

    Vector2 boxCenter = (Vector2)transform.position + (Vector2.down * playerSize.y * 0.5f);
    Gizmos.DrawWireCube(boxCenter, boxSize);
}
</code></pre>
<p>}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[EventSystems]]></title>
        <id>https://Wei715547.github.io/post/eventsystems/</id>
        <link href="https://Wei715547.github.io/post/eventsystems/">
        </link>
        <updated>2020-04-12T04:17:55.000Z</updated>
        <content type="html"><![CDATA[<p>using System.Collections;<br>
using System.Collections.Generic;<br>
using UnityEngine;<br>
using UnityEngine.EventSystems;<br>
public class DIalogDrag : MonoBehaviour, IPointerDownHandler,IDragHandler,IPointerClickHandler<br>
{<br>
private RectTransform parentRTF;<br>
private void Start()<br>
{<br>
//设置UI长宽<br>
RectTransform rtf = GetComponent<RectTransform>();<br>
rtf.SetSizeWithCurrentAnchors(RectTransform.Axis.Horizontal, 700);<br>
rtf.SetSizeWithCurrentAnchors(RectTransform.Axis.Vertical, 400);</p>
<pre><code>    parentRTF = this.transform.parent as RectTransform;
}
private Vector3 siftVector;
//按下时执行
public void OnPointerDown(PointerEventData eventData)
{
    //记录按下点到中心点偏移量

    Vector3 wordPoint;
    //屏幕坐标--&gt;世界坐标
    //(父物体的变换组件，屏幕坐标，摄像机，out 世界坐标)
    RectTransformUtility.ScreenPointToWorldPointInRectangle(parentRTF, eventData.position, eventData.pressEventCamera, out wordPoint);
    siftVector = this.transform.position - wordPoint;
}
//拖拽时执行
public void OnDrag(PointerEventData eventData)
{
    Vector3 wordPoint;
    //屏幕坐标--&gt;世界坐标
    //(父物体的变换组件，屏幕坐标，摄像机，out 世界坐标)
    RectTransformUtility.ScreenPointToWorldPointInRectangle(parentRTF, eventData.position, eventData.pressEventCamera, out wordPoint);
    this.transform.position = wordPoint + siftVector ;
    
}

public void OnPointerClick(PointerEventData eventData)
{
    if (eventData.clickCount == 2)
        Destroy (this .gameObject );
}
</code></pre>
<p>}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[HP-Attack-Shell]]></title>
        <id>https://Wei715547.github.io/post/hp-attack-shell/</id>
        <link href="https://Wei715547.github.io/post/hp-attack-shell/">
        </link>
        <updated>2020-04-07T09:57:39.000Z</updated>
        <content type="html"><![CDATA[<p>using System.Collections;<br>
using System.Collections.Generic;<br>
using UnityEngine;<br>
using UnityEngine.UI;<br>
/// <summary><br>
/// HP，HP受损方法<br>
/// </summary><br>
public class TankHealth : MonoBehaviour<br>
{<br>
public int hp = 100;<br>
public GameObject tankExplosion;<br>
public AudioClip tankExplositionAudio;<br>
public Slider hpSlider;<br>
private int hpTotal;<br>
// Use this for initialization<br>
void Start()<br>
{<br>
hpTotal = hp;<br>
}</p>
<pre><code>// Update is called once per frame
void Update()
{

}
void TankDamage()
{
    if (hp &lt;= 0) return;
    hp -= Random.Range(10, 20);
    hpSlider.value = (float)hp / hpTotal;
    if (hp &lt;= 0)
    {
        AudioSource.PlayClipAtPoint(tankExplositionAudio, transform.position);
        GameObject.Instantiate(tankExplosion, transform.position + Vector3.up, transform.rotation);
        GameObject.Destroy(this.gameObject);
    }
}
</code></pre>
<p>}</p>
<p>using System.Collections;<br>
using System.Collections.Generic;<br>
using UnityEngine;<br>
/// <summary><br>
/// 按下攻击，发射子弹向FirePoint前方飞进<br>
/// </summary><br>
public class TankAttack : MonoBehaviour<br>
{</p>
<pre><code>public GameObject shellPrefab;
public KeyCode fireKey = KeyCode.Space;
private Transform firePosition;
public float shellSpeed = 10;
public AudioClip shoutAudio;
// Use this for initialization
void Start()
{
    firePosition = transform.Find(&quot;FirePosition&quot;);
}

// Update is called once per frame
void Update()
{
    if (Input.GetKeyDown(fireKey))
    {
        AudioSource.PlayClipAtPoint(shoutAudio, transform.position);
        GameObject go = GameObject.Instantiate(shellPrefab, firePosition.position, firePosition.rotation)as GameObject;
        go.GetComponent&lt;Rigidbody&gt;().velocity = go.transform.forward * shellSpeed;
    }
}
</code></pre>
<p>}</p>
<p>using System.Collections;<br>
using System.Collections.Generic;<br>
using UnityEngine;<br>
/// <summary><br>
/// 子弹出发检测，（两物体都有触发器，其中一个有刚体组件，其中一个触发器勾选Is Tirgger）<br>
///打中目标，调用目标受损方法<br>
/// </summary><br>
public class Shell : MonoBehaviour<br>
{</p>
<pre><code>public GameObject shellExplosionPrefab;
public  AudioClip shellExplosionAudio;


public void OnTriggerEnter(Collider collider)
{
    AudioSource.PlayClipAtPoint(shellExplosionAudio,transform.position);
    GameObject.Instantiate(shellExplosionPrefab, transform.position, transform.rotation);
    GameObject.Destroy(this.gameObject);
    if (collider.tag == &quot;Tank&quot;)
    {
        collider.SendMessage(&quot;TankDamage&quot;);
    }

}
</code></pre>
<p>}</p>
]]></content>
    </entry>
</feed>