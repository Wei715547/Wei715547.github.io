<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Wei715547.github.io</id>
    <title>Wei: Development technology accumulation</title>
    <updated>2020-07-24T14:47:33.589Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Wei715547.github.io"/>
    <link rel="self" href="https://Wei715547.github.io/atom.xml"/>
    <subtitle>年月增长，我宜强盛。
用于Unity+开发的技术积累</subtitle>
    <logo>https://Wei715547.github.io/images/avatar.png</logo>
    <icon>https://Wei715547.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Wei: Development technology accumulation</rights>
    <entry>
        <title type="html"><![CDATA[简单工厂设计模式]]></title>
        <id>https://Wei715547.github.io/post/jian-dan-gong-han-she-ji-mo-shi/</id>
        <link href="https://Wei715547.github.io/post/jian-dan-gong-han-she-ji-mo-shi/">
        </link>
        <updated>2020-07-24T14:46:10.000Z</updated>
        <content type="html"><![CDATA[<p>using System;</p>
<p>namespace 简单工厂设计模式//（抽象类实现的多态）<br>
{<br>
class Program<br>
{<br>
static void Main(string[] args)<br>
{<br>
string brand = Console.ReadLine();<br>
NoteBook cosm = GetNoteBook(brand);<br>
cosm.Say();<br>
}</p>
<pre><code>    public static NoteBook GetNoteBook(string brand)
    {
        NoteBook nb = null;
        switch(brand)
        {
            case &quot;Lenovo&quot;:nb = new Lenovo();
                break;
            case &quot;Acre&quot;:nb = new Acre();
                break;
            case &quot;IBM&quot;:nb = new IBM();
                break;
        }
        return nb;
    }

    public abstract class NoteBook
    {
        public abstract void Say();
    }

    public class Lenovo : NoteBook
    {
        public override void Say()
        {
            Console.WriteLine(&quot;Lenovo&quot;);
        }
    }

    public class Acre:NoteBook
    {
        public override void Say()
        {
            Console.WriteLine(&quot;Acre&quot;);
        }
    }

    public class IBM:NoteBook
    {
        public override void Say()
        {
            Console.WriteLine(&quot;IBM&quot;);
        }
    }
}
</code></pre>
<p>}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[访问修饰符]]></title>
        <id>https://Wei715547.github.io/post/fang-wen-xiu-shi-fu/</id>
        <link href="https://Wei715547.github.io/post/fang-wen-xiu-shi-fu/">
        </link>
        <updated>2020-07-24T14:20:12.000Z</updated>
        <content type="html"><![CDATA[<p>public: 公开访问<br>
private:私有的，只能在当前类中访问<br>
protected:受保护的，只能在当前类或其子类中访问<br>
internal:只能在当前程序集/项目中访问，在同一项目中internal与public权限相同<br>
protected innternal:  protected + innternal</p>
<p>1.可以修饰类的只有：public，internal<br>
2.子类的访问权限不能高于父类的访问权限，会暴露父类成员<br>
例：在程序集外会通过子类访问到子类所继承的父类成员！<br>
internal class Person<br>
{</p>
<pre><code>    }

    public class Student : Person
    {

    }
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[里式转换-类多态]]></title>
        <id>https://Wei715547.github.io/post/li-shi-zhuan-huan-lei-duo-tai/</id>
        <link href="https://Wei715547.github.io/post/li-shi-zhuan-huan-lei-duo-tai/">
        </link>
        <updated>2020-07-21T10:40:38.000Z</updated>
        <content type="html"><![CDATA[<p>class Program<br>
{<br>
public class Per<br>
{<br>
public void Say()<br>
{<br>
Console.WriteLine(&quot;Per&quot;);<br>
}<br>
}<br>
public class PerSOne:Per<br>
{<br>
public void Say()<br>
{<br>
Console.WriteLine(&quot;PerSOne&quot;);<br>
}<br>
}<br>
public class PerSTwo:Per<br>
{<br>
public void Say()<br>
{<br>
Console.WriteLine(&quot;PerSTwo&quot;);<br>
}<br>
}</p>
<pre><code>    static void Main(string[] args)
    {
        //里式转换-类多态
        Per[] per = new Per[3];
        Random r = new Random();
        int rs = 0;
        for (int i = 0; i &lt; per.Length; i++)
        {
            rs = r.Next(0, 2);
            switch(rs)
            {
                case 0:per[i] = new PerSOne();
                    break;
                case 1:per[i] = new PerSTwo();
                    break;
            }
        }

        for (int i = 0; i &lt; per.Length; i++)
        {
            if (per[i] is PerSOne)
            {
                ((PerSOne)per[i]).Say();
            }
            else if (per[i] is PerSTwo)
            {
                ((PerSTwo)per[i]).Say();
            }
            else
                per[i].Say();
            
        }

        Console.ReadKey();

    }</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[解决Hash冲突的方式]]></title>
        <id>https://Wei715547.github.io/post/jie-jue-hash-chong-tu-de-fang-shi/</id>
        <link href="https://Wei715547.github.io/post/jie-jue-hash-chong-tu-de-fang-shi/">
        </link>
        <updated>2020-07-13T15:17:48.000Z</updated>
        <content type="html"><![CDATA[<p>//解决冲突的方式</p>
<p>//1.桶式散列法<br>
//在数组列表中存储数组列表<br>
//一个键(主容器数组列表索引)可存储多个值(数组列表内的“数组列表的多个值“)<br>
class BucketHash<br>
{</p>
<pre><code>    private const int SIZE = 101;
    ArrayList[] date;

    public BucketHash()
    {
        date = new ArrayList[SIZE];
        for (int i = 0; i &lt; SIZE; i++)
        {
            date[i] = new ArrayList(4);
        }
    }

    public int Hash(string s)
    {
        long key = 0;
        char[] cname = s.ToCharArray();
        for (int i = 0; i &lt; cname.Length; i++)
        {
            key += 37 * key + (int)cname[i];
        }
        key = key % date.GetUpperBound(0);
        if (key &lt; 0)
            key += date.GetUpperBound(0);
        return (int)key;
    }

    public void Insert(string s)
    {
        int hash_key = Hash(s);
        if (!date[hash_key].Contains(s))
            date[hash_key].Add(s);

    }

    public void Remove(string s)
    {
        int hash_key = Hash(s);
        if (date[hash_key].Contains(s))
            date[hash_key].Remove(s);
    }

    public void ShowTable()
    {
        for (int i = 0; i &lt; date.Length; i++)
        {
            if (date[i].Count&gt;0)
            {
                Console.Write(i+&quot;:&quot;);
                foreach (string s in date[i])
                {
                    Console.Write(s);
                }
                Console.WriteLine();
            }
                
        }
    }
}
</code></pre>
<p>}<br>
//示例程序<br>
class Program<br>
{<br>
static void Main(string[] args)<br>
{<br>
//桶式散列法<br>
BucketHash bkHash = new BucketHash();<br>
for (int i = 0; i &lt; someName .Length; i++)<br>
{<br>
bkHash.Insert(someName[i]);<br>
}<br>
bkHash.ShowTable();</p>
<pre><code>    }

//2.开放地址法
//发生冲突时，寻找下一个空的散列地址（平方探测直至找到下一个空位置）

//多重散列
//存在多种哈希函数，发生冲突时调用备选哈希函数
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[散列表HashTable]]></title>
        <id>https://Wei715547.github.io/post/san-lie-biao-hashtable/</id>
        <link href="https://Wei715547.github.io/post/san-lie-biao-hashtable/">
        </link>
        <updated>2020-07-13T15:15:58.000Z</updated>
        <content type="html"><![CDATA[<p>namespace Hash<br>
{<br>
class Program<br>
{<br>
static void Main(string[] args)<br>
{<br>
string[] hashTable = new string[10007];//数组长度使用素数<br>
string name;<br>
string[] someName = new string[] { &quot;Wei&quot;, &quot;WDQWAS&quot;, &quot;QWCQCQ&quot;, &quot;WeCQSCi3&quot;, &quot;QWC&quot;, &quot;SCZ&quot;, &quot;VDBC&quot;, &quot;XCDF&quot;, &quot;XSDXDS&quot;, &quot;Wei9&quot; };</p>
<pre><code>        int hashKey;
        for (int i = 0; i &lt; someName .Length; i++)
        {
            name = someName[i];
            hashKey = BatterHashMathf(name, hashTable);
            hashTable[hashKey] = name;
        }
        ShowTable(hashTable);

        Console.WriteLine(InHash(&quot;Wei&quot;,hashTable));
        Console.WriteLine(GetKey (&quot;Wei&quot;,hashTable));

    }

    public static int HashMathf(string s,string [] table)
    {
        int key = 0;
        char[] cname = s.ToCharArray();
        for (int i = 0; i &lt;cname .Length; i++)
        {
            key += (int)cname[i];
        }
        return key % table.GetUpperBound(0);
    }

    //解决冲突的方式
    //桶式散列法
    //开放地址法
    //双重散列法
    public static int BatterHashMathf(string s,string[] arr)
    {
        long key = 0;
        char[] cname = s.ToCharArray();
        for (int i = 0; i &lt; cname.Length; i++)
        {
            key += 37*key+(int)cname[i];
        }
        key = key % arr.GetUpperBound(0);
        if (key &lt; 0)
            key += arr.GetUpperBound(0);
        return (int)key;
    }

    public static void ShowTable(string [] arr)
    {
        for (int i = 0; i &lt; arr.Length; i++)
        {
            if (arr[i]!=null)
                Console.WriteLine(i+&quot;:&quot;+arr[i]);
        }
    }

    public static bool InHash(string s,string []arr)
    {
        int hashKey = BatterHashMathf(s, arr);
        if (arr[hashKey].Equals(s))
        {
            return true;
        }else
        {
            return false;
        }
    }

    public static int GetKey(string s,string []arr)
    {
        if (InHash(s, arr))
            return BatterHashMathf(s, arr);
        else
            return -1;
    }

}
</code></pre>
<p>}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[构建字典集合]]></title>
        <id>https://Wei715547.github.io/post/gou-jian-zi-dian-ji-he/</id>
        <link href="https://Wei715547.github.io/post/gou-jian-zi-dian-ji-he/">
        </link>
        <updated>2020-07-13T13:32:28.000Z</updated>
        <content type="html"><![CDATA[<p>using System.Collections;<br>
namespace MyDictionary<br>
{//字典集合类<br>
class IDic:DictionaryBase<br>
{<br>
public IDic()<br>
{</p>
<pre><code>    }
    public void Add(string name,string IP)
    {
        base.InnerHashtable[name] = IP;
    }

    public string Item(string name)
    {
        return base.InnerHashtable[name].ToString();
    }

    public void Remove(string name)
    {
        base.InnerHashtable.Remove(name);
    }

}
</code></pre>
<p>}<br>
//示例程序<br>
class Program<br>
{<br>
static void Main(string[] args)<br>
{<br>
IDic IPDic = new IDic();<br>
IPDic.Add(&quot;Wei&quot;, &quot;715547&quot;);<br>
IPDic.Add(&quot;Wei02&quot;, &quot;715548&quot;);<br>
IPDic.Add(&quot;Wei03&quot;, &quot;715549&quot;);</p>
<pre><code>        Console.WriteLine(IPDic.Item(&quot;Wei&quot;));

        DictionaryEntry[] ips = new DictionaryEntry[IPDic.Count];

        IPDic.CopyTo(ips,0);
        for (int i = 0; i &lt;= ips.GetUpperBound(0); i++)
        {
            Console.WriteLine(ips[i].Key+&quot;:&quot;+ips[i].Value);
        }


    }
}</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Leet Code01-03]]></title>
        <id>https://Wei715547.github.io/post/leet-code01/</id>
        <link href="https://Wei715547.github.io/post/leet-code01/">
        </link>
        <updated>2020-07-08T08:35:31.000Z</updated>
        <content type="html"><![CDATA[<p>using System;<br>
using System.Collections.Generic;</p>
<p>namespace Leet_Code<br>
{<br>
class Program<br>
{<br>
/*给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p>
<pre><code>    你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。



    示例:

    给定 nums = [2, 7, 11, 15], target = 9

    因为 nums[0] + nums[1] = 2 + 7 = 9
    所以返回[0, 1]

    来源：力扣（LeetCode）
    链接：https://leetcode-cn.com/problems/two-sum
    著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。*/
    static void Main(string[] args)
    {
        int[] nums = new int[] { 2, 15, 11, 7 };
        int [] ans = LeetCodeone(nums, 9);
        foreach (var item in ans)
        {
            Console.WriteLine(item);
        }
    }
    
    public static int [] LeetCodeone(int[] nums,int target)
    {
        Dictionary&lt;int, int&gt; map = new Dictionary&lt;int, int&gt;();
        for (int i = 0; i &lt; nums.Length; i++)
        {
            int dis = target - nums[i];
            if (map.ContainsKey(dis) &amp;&amp; map[dis]!=i)
            {
                return   new int[] { map[dis],i};
            }
            
            if(!map.ContainsKey(nums[i]))
            {
                map.Add(nums[i], i);
            }
        }
        return new int[] { 0, 0 };
    }
//给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。
public static int LengthOfLongestSubstring(string s)
    {

        int max = 0;
        Queue&lt;char&gt; q = new Queue&lt;char&gt;();
        foreach (char c in s)
        {
            while (q.Contains(c))
                q.Dequeue();
            q.Enqueue(c);
            if (q.Count &gt; max)
                max = q.Count;
        }
        return max;
    }

}
</code></pre>
<p>}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[红黑树]]></title>
        <id>https://Wei715547.github.io/post/hong-hei-shu/</id>
        <link href="https://Wei715547.github.io/post/hong-hei-shu/">
        </link>
        <updated>2020-07-04T02:40:18.000Z</updated>
        <content type="html"><![CDATA[<p>1、衡树，非平衡树<br>
2、红黑树特征：节点都用颜色，插入删除节点遵守红黑规则<br>
红黑规则：<br>
1.每个节点不是红色便是黑色<br>
2.根节点总是黑色<br>
3.如果节点时红的，则它的子节点必须是黑色的<br>
4.从根到叶节点的每条滤路径，必须包含相同数目的黑色节点<br>
不满足规则时的修改方法<br>
1.改变节点的颜色<br>
2.旋转</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[二叉查找树BST]]></title>
        <id>https://Wei715547.github.io/post/er-cha-cha-zhao-shu-bst/</id>
        <link href="https://Wei715547.github.io/post/er-cha-cha-zhao-shu-bst/">
        </link>
        <updated>2020-07-03T03:18:44.000Z</updated>
        <content type="html"><![CDATA[<p>//元素类<br>
class Element<br>
{<br>
public int key;<br>
public Element (int k)<br>
{<br>
key = k;<br>
}<br>
}<br>
//节点类<br>
class BstNode<br>
{</p>
<pre><code>    public Element date ;

    public BstNode leftNode;
    public BstNode rightNode;
    public void DisPlay( int i)
    {
        Console.WriteLine(&quot;Position:&quot; +i + &quot;Date:&quot; +date.key);
        if (leftNode != null) 
            leftNode.DisPlay(2 * i);
        if (rightNode != null)
            rightNode.DisPlay(2 * i+1);
    }
}

//二叉查找树
namespace 二叉查找树
</code></pre>
<p>{<br>
class BST<br>
{<br>
private BstNode root;<br>
public BstNode Root<br>
{<br>
get { return root; }<br>
set { root = value; }<br>
}<br>
public BST()<br>
{<br>
root = null;<br>
}<br>
public BST(BstNode init )<br>
{<br>
root = init;<br>
}</p>
<pre><code>    public BstNode IterSearch(Element x)
    {
        for(BstNode t = root;t!=null;)
        {
            if (x.key == t.date.key)
                return t;
            if (x.key &lt; t.date.key)
                t = t.leftNode;
            if (x.key &gt; t.date.key)
                t = t.rightNode;

        }
        return null;

    }

    public BstNode Search(BstNode sr, Element x)
    {
        if (sr == null)
        {
            Console.WriteLine(&quot;输入节点为空或未找到数据&quot;);
            return null;
        }
        if (sr.date.key == x.key) return sr;
        if (x.key &lt;sr .date.key)
        {
            return Search(sr.leftNode, x);
        }
        return Search(sr.rightNode, x);
    }
    public void DisPlay()
    {
        if(root !=null )
        {
            root.DisPlay(1);
        }
        else
        {
            Console.WriteLine(&quot;Is null&quot;);
        }
    }
    public bool Insert(Element x)
    {
        BstNode   p = root;
        BstNode q = null;
        while(p!=null)
        {
            q = p;
            if (x.key.Equals( p.date.key)) 
                return false;
            if (x.key &lt; p.date.key)
                p = p.leftNode;
            else 
                p = p.rightNode;
        }
        p = new BstNode();
        p.leftNode = null;
        p.rightNode = null;
        p.date = x;
        if (root == null) root = p;
        else if (x.key &lt; q.date.key) q.leftNode = p;
        else q.rightNode = p;
        return true;
    }

    public void ShowNode(BstNode root)
    {
        Console.WriteLine(root .date.key+&quot; &quot;);
    }

    /// &lt;summary&gt;
    /// 中序遍历结果为排序后的数据
    /// &lt;/summary&gt;
    public void InOrder()
    {
        InOrder(Root);
    }
    public void InOrder(BstNode node)
    {
        if (node!=null )
        {
            InOrder(node.leftNode);
            ShowNode(node);
            InOrder(node.rightNode);
        }
    }
}
</code></pre>
<p>}</p>
<p>//实例程序<br>
class Program<br>
{<br>
static void Main(string[] args)<br>
{<br>
BST m = new BST();<br>
//Element a, b, c, d, e, f, g, h, i, j;<br>
Element a = new Element(5);<br>
Element b = new Element(3);<br>
Element c = new Element(11);<br>
Element d = new Element(3);<br>
Element e = new Element(15);<br>
Element f = new Element(2);<br>
Element g= new Element(8);<br>
Element h = new Element(22);<br>
Element i = new Element(20);<br>
Element j = new Element(9);</p>
<pre><code>        Console.WriteLine(m.Insert(a));
        Console.WriteLine(m.Insert(b));
        Console.WriteLine(m.Insert (c));
        Console.WriteLine(m.Insert (d));
        Console.WriteLine(m.Insert (e));
        Console.WriteLine(m.Insert(f));
        Console.WriteLine(m.Insert (g));
        Console.WriteLine(m.Insert (i));
        m.DisPlay();

        BstNode p = m.Search(m.Root,f);
        Console.WriteLine(&quot;找到的是&quot;+p.date.key);

        m.InOrder();
    }
}

![](https://Wei715547.github.io/post-images/1593746877703.png)</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[C#二叉树建立/遍历(前中后层)]]></title>
        <id>https://Wei715547.github.io/post/cer-cha-shu-jian-li-bian-li-qian-zhong-hou-ceng/</id>
        <link href="https://Wei715547.github.io/post/cer-cha-shu-jian-li-bian-li-qian-zhong-hou-ceng/">
        </link>
        <updated>2020-07-01T08:08:52.000Z</updated>
        <content type="html"><![CDATA[<p>//节点类<br>
namespace 二叉树<br>
{<br>
class Node<T><br>
{<br>
private T date;<br>
public T Date { get { return date; } set { date = value; } }<br>
private Node<T> leftNode;<br>
public Node<T> LeftNode<br>
{<br>
get { return leftNode; }<br>
set { leftNode = value; }<br>
}<br>
private Node<T> rightNode;<br>
public Node <T> RightNode<br>
{<br>
get { return rightNode; }<br>
set { rightNode = value; }<br>
}</p>
<pre><code>    public Node()
    {
        leftNode = null;
        rightNode = null;
    }

    public Node (T date)
    {
        this.date = date;
        leftNode = null;
        rightNode = null;
    }

}
</code></pre>
<p>}<br>
//二叉树<br>
namespace 二叉树<br>
{<br>
class BinaryTree<T><br>
{<br>
private Node<T> node;<br>
public Node <T> RootNode<br>
{<br>
get { return node; }<br>
set { node = value; }<br>
}</p>
<pre><code>    public void  ShowNode(Node &lt;T&gt; node )
    {
        Console.Write(node .Date+&quot; &quot;);
    }

    //前序遍历-节点-左子树-右子树：+-*/ABCDE
    public void PerOrder()
    {
        PerOrder(node);
    }
    public void PerOrder(Node &lt;T&gt; root)
    {
        if (root!=null)
        {
            ShowNode(root);
            PerOrder(root.LeftNode);
            PerOrder(root.RightNode);
        }
    }
    //中序遍历-左子树-节点-右子树：A/B*C-D+E
    public void InOrder()
    {
        InOrder(node);

    }
    public void InOrder(Node&lt;T&gt; root)
    {
        if (root !=null)
        {
            InOrder(root.LeftNode);
            ShowNode(root); //显示当前节点
            InOrder(root.RightNode);
        }
    }
    //后序遍历-左子树-右子树-节点：AB/C*D-E+
    public void PostOrder()
    {
        PostOrder(node);
    }
    public void PostOrder(Node &lt;T&gt; root)
    {
        if (root!=null)
        {
            PostOrder(root.LeftNode);
            PostOrder(root.RightNode);
            ShowNode(root);
        }
    }

    
    /// &lt;summary&gt;
    /// 层序遍历-分别显示第一...层
    /// 显示：+
    /// 队列：显示+之前把节点的左子树节点，右子树节点先后放入队列中，然后显示该节点-将其移除队列
    /// &lt;/summary&gt;
    public void LevelOrder()
    {
        Queue&lt;Node&lt;T&gt;&gt; q = new Queue&lt;Node&lt;T&gt;&gt;();
        Node&lt;T&gt; node = RootNode;
        while(node!=null)
        {
            ShowNode(node);
            if (node.LeftNode != null) q.Enqueue(node.LeftNode);
            if (node.RightNode != null) q.Enqueue(node.RightNode);
            if (q.Count == 0) return;
            node = q.Dequeue();
        }
    }
}
</code></pre>
<p>}<br>
//测试程序<br>
class Program<br>
{<br>
static void Main(string[] args)<br>
{<br>
BinaryTree<char> tree = new BinaryTree<char>(); ;<br>
Node<char> nodeOne ,nodeTwo, nodeTheer, nodeFore,a,b,c,d,e;<br>
nodeOne = new Node<char>('+');<br>
nodeTwo = new Node<char>('-');<br>
nodeTheer = new Node<char>('*');<br>
nodeFore = new Node<char>('/');<br>
a = new Node<char>('A');<br>
b = new Node<char>('B');<br>
c = new Node<char>('C');<br>
d = new Node<char>('D');<br>
e = new Node<char>('E');<br>
tree.RootNode = nodeOne;<br>
nodeOne.LeftNode = nodeTwo;<br>
nodeOne.RightNode = e;<br>
nodeTwo.LeftNode = nodeTheer;<br>
nodeTwo.RightNode = d;<br>
nodeTheer.LeftNode = nodeFore;<br>
nodeTheer.RightNode = c;<br>
nodeFore.LeftNode = a;<br>
nodeFore.RightNode = b;</p>
<pre><code>        /*//二叉树的中序遍历,以左子树-节点-右子树的顺序输出节点；
        tree.InOrder();

        //前序遍历
        tree.PerOrder();

        //后续排序
        tree.PostOrder();*/

        //层序遍历
        tree.LevelOrder();

    }
}
![](https://Wei715547.github.io/post-images/1593592462809.png)
</code></pre>
]]></content>
    </entry>
</feed>