<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Wei715547.github.io</id>
    <title>Wei: Development technology accumulation</title>
    <updated>2020-07-13T13:34:54.197Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Wei715547.github.io"/>
    <link rel="self" href="https://Wei715547.github.io/atom.xml"/>
    <subtitle>年月增长，我宜强盛。
用于Unity+开发的技术积累</subtitle>
    <logo>https://Wei715547.github.io/images/avatar.png</logo>
    <icon>https://Wei715547.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Wei: Development technology accumulation</rights>
    <entry>
        <title type="html"><![CDATA[构建字典集合]]></title>
        <id>https://Wei715547.github.io/post/gou-jian-zi-dian-ji-he/</id>
        <link href="https://Wei715547.github.io/post/gou-jian-zi-dian-ji-he/">
        </link>
        <updated>2020-07-13T13:32:28.000Z</updated>
        <content type="html"><![CDATA[<p>using System.Collections;<br>
namespace MyDictionary<br>
{//字典集合类<br>
class IDic:DictionaryBase<br>
{<br>
public IDic()<br>
{</p>
<pre><code>    }
    public void Add(string name,string IP)
    {
        base.InnerHashtable[name] = IP;
    }

    public string Item(string name)
    {
        return base.InnerHashtable[name].ToString();
    }

    public void Remove(string name)
    {
        base.InnerHashtable.Remove(name);
    }

}
</code></pre>
<p>}<br>
//示例程序<br>
class Program<br>
{<br>
static void Main(string[] args)<br>
{<br>
IDic IPDic = new IDic();<br>
IPDic.Add(&quot;Wei&quot;, &quot;715547&quot;);<br>
IPDic.Add(&quot;Wei02&quot;, &quot;715548&quot;);<br>
IPDic.Add(&quot;Wei03&quot;, &quot;715549&quot;);</p>
<pre><code>        Console.WriteLine(IPDic.Item(&quot;Wei&quot;));

        DictionaryEntry[] ips = new DictionaryEntry[IPDic.Count];

        IPDic.CopyTo(ips,0);
        for (int i = 0; i &lt;= ips.GetUpperBound(0); i++)
        {
            Console.WriteLine(ips[i].Key+&quot;:&quot;+ips[i].Value);
        }


    }
}</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Leet Code01-03]]></title>
        <id>https://Wei715547.github.io/post/leet-code01/</id>
        <link href="https://Wei715547.github.io/post/leet-code01/">
        </link>
        <updated>2020-07-08T08:35:31.000Z</updated>
        <content type="html"><![CDATA[<p>using System;<br>
using System.Collections.Generic;</p>
<p>namespace Leet_Code<br>
{<br>
class Program<br>
{<br>
/*给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p>
<pre><code>    你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。



    示例:

    给定 nums = [2, 7, 11, 15], target = 9

    因为 nums[0] + nums[1] = 2 + 7 = 9
    所以返回[0, 1]

    来源：力扣（LeetCode）
    链接：https://leetcode-cn.com/problems/two-sum
    著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。*/
    static void Main(string[] args)
    {
        int[] nums = new int[] { 2, 15, 11, 7 };
        int [] ans = LeetCodeone(nums, 9);
        foreach (var item in ans)
        {
            Console.WriteLine(item);
        }
    }
    
    public static int [] LeetCodeone(int[] nums,int target)
    {
        Dictionary&lt;int, int&gt; map = new Dictionary&lt;int, int&gt;();
        for (int i = 0; i &lt; nums.Length; i++)
        {
            int dis = target - nums[i];
            if (map.ContainsKey(dis) &amp;&amp; map[dis]!=i)
            {
                return   new int[] { map[dis],i};
            }
            
            if(!map.ContainsKey(nums[i]))
            {
                map.Add(nums[i], i);
            }
        }
        return new int[] { 0, 0 };
    }
//给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。
public static int LengthOfLongestSubstring(string s)
    {

        int max = 0;
        Queue&lt;char&gt; q = new Queue&lt;char&gt;();
        foreach (char c in s)
        {
            while (q.Contains(c))
                q.Dequeue();
            q.Enqueue(c);
            if (q.Count &gt; max)
                max = q.Count;
        }
        return max;
    }

}
</code></pre>
<p>}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[红黑树]]></title>
        <id>https://Wei715547.github.io/post/hong-hei-shu/</id>
        <link href="https://Wei715547.github.io/post/hong-hei-shu/">
        </link>
        <updated>2020-07-04T02:40:18.000Z</updated>
        <content type="html"><![CDATA[<p>1、衡树，非平衡树<br>
2、红黑树特征：节点都用颜色，插入删除节点遵守红黑规则<br>
红黑规则：<br>
1.每个节点不是红色便是黑色<br>
2.根节点总是黑色<br>
3.如果节点时红的，则它的子节点必须是黑色的<br>
4.从根到叶节点的每条滤路径，必须包含相同数目的黑色节点<br>
不满足规则时的修改方法<br>
1.改变节点的颜色<br>
2.旋转</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[二叉查找树BST]]></title>
        <id>https://Wei715547.github.io/post/er-cha-cha-zhao-shu-bst/</id>
        <link href="https://Wei715547.github.io/post/er-cha-cha-zhao-shu-bst/">
        </link>
        <updated>2020-07-03T03:18:44.000Z</updated>
        <content type="html"><![CDATA[<p>//元素类<br>
class Element<br>
{<br>
public int key;<br>
public Element (int k)<br>
{<br>
key = k;<br>
}<br>
}<br>
//节点类<br>
class BstNode<br>
{</p>
<pre><code>    public Element date ;

    public BstNode leftNode;
    public BstNode rightNode;
    public void DisPlay( int i)
    {
        Console.WriteLine(&quot;Position:&quot; +i + &quot;Date:&quot; +date.key);
        if (leftNode != null) 
            leftNode.DisPlay(2 * i);
        if (rightNode != null)
            rightNode.DisPlay(2 * i+1);
    }
}

//二叉查找树
namespace 二叉查找树
</code></pre>
<p>{<br>
class BST<br>
{<br>
private BstNode root;<br>
public BstNode Root<br>
{<br>
get { return root; }<br>
set { root = value; }<br>
}<br>
public BST()<br>
{<br>
root = null;<br>
}<br>
public BST(BstNode init )<br>
{<br>
root = init;<br>
}</p>
<pre><code>    public BstNode IterSearch(Element x)
    {
        for(BstNode t = root;t!=null;)
        {
            if (x.key == t.date.key)
                return t;
            if (x.key &lt; t.date.key)
                t = t.leftNode;
            if (x.key &gt; t.date.key)
                t = t.rightNode;

        }
        return null;

    }

    public BstNode Search(BstNode sr, Element x)
    {
        if (sr == null)
        {
            Console.WriteLine(&quot;输入节点为空或未找到数据&quot;);
            return null;
        }
        if (sr.date.key == x.key) return sr;
        if (x.key &lt;sr .date.key)
        {
            return Search(sr.leftNode, x);
        }
        return Search(sr.rightNode, x);
    }
    public void DisPlay()
    {
        if(root !=null )
        {
            root.DisPlay(1);
        }
        else
        {
            Console.WriteLine(&quot;Is null&quot;);
        }
    }
    public bool Insert(Element x)
    {
        BstNode   p = root;
        BstNode q = null;
        while(p!=null)
        {
            q = p;
            if (x.key.Equals( p.date.key)) 
                return false;
            if (x.key &lt; p.date.key)
                p = p.leftNode;
            else 
                p = p.rightNode;
        }
        p = new BstNode();
        p.leftNode = null;
        p.rightNode = null;
        p.date = x;
        if (root == null) root = p;
        else if (x.key &lt; q.date.key) q.leftNode = p;
        else q.rightNode = p;
        return true;
    }

    public void ShowNode(BstNode root)
    {
        Console.WriteLine(root .date.key+&quot; &quot;);
    }

    /// &lt;summary&gt;
    /// 中序遍历结果为排序后的数据
    /// &lt;/summary&gt;
    public void InOrder()
    {
        InOrder(Root);
    }
    public void InOrder(BstNode node)
    {
        if (node!=null )
        {
            InOrder(node.leftNode);
            ShowNode(node);
            InOrder(node.rightNode);
        }
    }
}
</code></pre>
<p>}</p>
<p>//实例程序<br>
class Program<br>
{<br>
static void Main(string[] args)<br>
{<br>
BST m = new BST();<br>
//Element a, b, c, d, e, f, g, h, i, j;<br>
Element a = new Element(5);<br>
Element b = new Element(3);<br>
Element c = new Element(11);<br>
Element d = new Element(3);<br>
Element e = new Element(15);<br>
Element f = new Element(2);<br>
Element g= new Element(8);<br>
Element h = new Element(22);<br>
Element i = new Element(20);<br>
Element j = new Element(9);</p>
<pre><code>        Console.WriteLine(m.Insert(a));
        Console.WriteLine(m.Insert(b));
        Console.WriteLine(m.Insert (c));
        Console.WriteLine(m.Insert (d));
        Console.WriteLine(m.Insert (e));
        Console.WriteLine(m.Insert(f));
        Console.WriteLine(m.Insert (g));
        Console.WriteLine(m.Insert (i));
        m.DisPlay();

        BstNode p = m.Search(m.Root,f);
        Console.WriteLine(&quot;找到的是&quot;+p.date.key);

        m.InOrder();
    }
}

![](https://Wei715547.github.io/post-images/1593746877703.png)</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[C#二叉树建立/遍历(前中后层)]]></title>
        <id>https://Wei715547.github.io/post/cer-cha-shu-jian-li-bian-li-qian-zhong-hou-ceng/</id>
        <link href="https://Wei715547.github.io/post/cer-cha-shu-jian-li-bian-li-qian-zhong-hou-ceng/">
        </link>
        <updated>2020-07-01T08:08:52.000Z</updated>
        <content type="html"><![CDATA[<p>//节点类<br>
namespace 二叉树<br>
{<br>
class Node<T><br>
{<br>
private T date;<br>
public T Date { get { return date; } set { date = value; } }<br>
private Node<T> leftNode;<br>
public Node<T> LeftNode<br>
{<br>
get { return leftNode; }<br>
set { leftNode = value; }<br>
}<br>
private Node<T> rightNode;<br>
public Node <T> RightNode<br>
{<br>
get { return rightNode; }<br>
set { rightNode = value; }<br>
}</p>
<pre><code>    public Node()
    {
        leftNode = null;
        rightNode = null;
    }

    public Node (T date)
    {
        this.date = date;
        leftNode = null;
        rightNode = null;
    }

}
</code></pre>
<p>}<br>
//二叉树<br>
namespace 二叉树<br>
{<br>
class BinaryTree<T><br>
{<br>
private Node<T> node;<br>
public Node <T> RootNode<br>
{<br>
get { return node; }<br>
set { node = value; }<br>
}</p>
<pre><code>    public void  ShowNode(Node &lt;T&gt; node )
    {
        Console.Write(node .Date+&quot; &quot;);
    }

    //前序遍历-节点-左子树-右子树：+-*/ABCDE
    public void PerOrder()
    {
        PerOrder(node);
    }
    public void PerOrder(Node &lt;T&gt; root)
    {
        if (root!=null)
        {
            ShowNode(root);
            PerOrder(root.LeftNode);
            PerOrder(root.RightNode);
        }
    }
    //中序遍历-左子树-节点-右子树：A/B*C-D+E
    public void InOrder()
    {
        InOrder(node);

    }
    public void InOrder(Node&lt;T&gt; root)
    {
        if (root !=null)
        {
            InOrder(root.LeftNode);
            ShowNode(root); //显示当前节点
            InOrder(root.RightNode);
        }
    }
    //后序遍历-左子树-右子树-节点：AB/C*D-E+
    public void PostOrder()
    {
        PostOrder(node);
    }
    public void PostOrder(Node &lt;T&gt; root)
    {
        if (root!=null)
        {
            PostOrder(root.LeftNode);
            PostOrder(root.RightNode);
            ShowNode(root);
        }
    }

    
    /// &lt;summary&gt;
    /// 层序遍历-分别显示第一...层
    /// 显示：+
    /// 队列：显示+之前把节点的左子树节点，右子树节点先后放入队列中，然后显示该节点-将其移除队列
    /// &lt;/summary&gt;
    public void LevelOrder()
    {
        Queue&lt;Node&lt;T&gt;&gt; q = new Queue&lt;Node&lt;T&gt;&gt;();
        Node&lt;T&gt; node = RootNode;
        while(node!=null)
        {
            ShowNode(node);
            if (node.LeftNode != null) q.Enqueue(node.LeftNode);
            if (node.RightNode != null) q.Enqueue(node.RightNode);
            if (q.Count == 0) return;
            node = q.Dequeue();
        }
    }
}
</code></pre>
<p>}<br>
//测试程序<br>
class Program<br>
{<br>
static void Main(string[] args)<br>
{<br>
BinaryTree<char> tree = new BinaryTree<char>(); ;<br>
Node<char> nodeOne ,nodeTwo, nodeTheer, nodeFore,a,b,c,d,e;<br>
nodeOne = new Node<char>('+');<br>
nodeTwo = new Node<char>('-');<br>
nodeTheer = new Node<char>('*');<br>
nodeFore = new Node<char>('/');<br>
a = new Node<char>('A');<br>
b = new Node<char>('B');<br>
c = new Node<char>('C');<br>
d = new Node<char>('D');<br>
e = new Node<char>('E');<br>
tree.RootNode = nodeOne;<br>
nodeOne.LeftNode = nodeTwo;<br>
nodeOne.RightNode = e;<br>
nodeTwo.LeftNode = nodeTheer;<br>
nodeTwo.RightNode = d;<br>
nodeTheer.LeftNode = nodeFore;<br>
nodeTheer.RightNode = c;<br>
nodeFore.LeftNode = a;<br>
nodeFore.RightNode = b;</p>
<pre><code>        /*//二叉树的中序遍历,以左子树-节点-右子树的顺序输出节点；
        tree.InOrder();

        //前序遍历
        tree.PerOrder();

        //后续排序
        tree.PostOrder();*/

        //层序遍历
        tree.LevelOrder();

    }
}
![](https://Wei715547.github.io/post-images/1593592462809.png)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[通过EvenSystems.EventTrigger实现UI Button的按下，抬起....等事件]]></title>
        <id>https://Wei715547.github.io/post/tong-guo-evensystemseventtrigger-shi-xian-ui-button-de-an-xia-tai-qi-deng-shi-jian/</id>
        <link href="https://Wei715547.github.io/post/tong-guo-evensystemseventtrigger-shi-xian-ui-button-de-an-xia-tai-qi-deng-shi-jian/">
        </link>
        <updated>2020-06-30T06:41:07.000Z</updated>
        <content type="html"><![CDATA[<p>using UnityEngine.EventSystems;</p>
<pre><code>private Button jump;
private EventTrigger trigger;

void Start()
{
    jump = GameObject.Find(&quot;btn_Jump&quot;).GetComponent&lt;Button&gt;();
    trigger = jump.gameObject.GetComponent&lt;EventTrigger&gt;();//（在按钮上添加EventTrigger组件）
</code></pre>
<p>//按下，抬起事件<br>
EventTrigger.Entry down = new EventTrigger.Entry();//声明事件委托对象<br>
down.eventID = EventTriggerType.PointerDown;委托对象的属性，按下类型(事件类型)<br>
down.callback = new EventTrigger.TriggerEvent();//声明回调函数对象<br>
down.callback.AddListener(JumpButtonDown);//要调用的方法<br>
trigger.triggers.Add(down);将委托加入EvenSystem的事件委托链</p>
<pre><code>    EventTrigger.Entry undown = new EventTrigger.Entry();
    undown.eventID = EventTriggerType.PointerUp;//抬起事件
    undown.callback = new EventTrigger.TriggerEvent();
    undown.callback.AddListener(JumpButtonUp);
    trigger.triggers.Add(undown);

//光标移入，移出事件
    /*EventTrigger.Entry downing = new EventTrigger.Entry();
    downing.eventID = EventTriggerType.PointerEnter;
    downing.callback = new EventTrigger.TriggerEvent();
    downing.callback.AddListener(JumpButton);
    trigger.triggers.Add(downing);
    EventTrigger.Entry undowning = new EventTrigger.Entry();
    undowning.eventID = EventTriggerType.PointerExit;
    undowning.callback = new EventTrigger.TriggerEvent();
    undowning.callback.AddListener(UnJumpButton);
    trigger.triggers.Add(downing);*/
}

public void JumpButtonDown(BaseEventData pointDate)
{
    print(&quot;按下跳跃键&quot;);
    jumpPressed = true;//模拟ButtonDown
    jumpHeld = true;
    Invoke(&quot;SetBack&quot;, 0.1f);
}
public void JumpButtonUp(BaseEventData pointDate)
{
    print(&quot;抬起跳跃键&quot;);
    jumpHeld = false;
}
public void SetBack()
{
    jumpPressed = false;
}</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Search/Perm]]></title>
        <id>https://Wei715547.github.io/post/search/</id>
        <link href="https://Wei715547.github.io/post/search/">
        </link>
        <updated>2020-06-29T07:14:47.000Z</updated>
        <content type="html"><![CDATA[<p>顺序查找<br>
static int SeqSearch(int[] dateArray,int x)<br>
{<br>
int i;<br>
for(i=0;i&lt;dateArray.Length;i++)<br>
{<br>
if (dateArray[i] == x)<br>
return i;<br>
}<br>
//if (i == dateArray.Length)<br>
return -1;<br>
}<br>
//二分查找<br>
/// <summary><br>
/// 二分查找，对从小到大排序过的数据进行查找，效率极高<br>
/// </summary><br>
/// <param name="datArray"></param><br>
/// <param name="x"></param><br>
/// <returns></returns><br>
static int BinSearch(int[] datArray,int x)<br>
{<br>
int left = 0, right = datArray.Length - 1;<br>
while(left &lt;=right)<br>
{<br>
int mind = (left + right) / 2;<br>
if (datArray[mind] &gt; x)<br>
right = mind - 1;<br>
else if (datArray[mind] &lt; x)<br>
left = mind + 1;<br>
else if (datArray[mind] == x)<br>
return mind;<br>
}<br>
return -1;<br>
}</p>
<pre><code>     //递归阶乘
    static int Mtn(int n)
    {
        if (n == 0)
            return 1;
        else
            return n * Mtn(n - 1);
        /*int m = 1;
        for (int i = n; i &gt;0; i--)
        {
            m *= i;
        }
        return m;*/
    }

    //递归二分查找
    static int BinarySearch_R(int[] dateArray,int x, int left,int right)
    {
        if(left &lt;=right )
        {
            int mind = (left + right) / 2;
            if (x &lt; dateArray[mind])
                return BinarySearch_R(dateArray, x, left, mind - 1);
            else if (x &gt; dateArray[mind])
                return BinarySearch_R(dateArray, x, mind + 1, right);
            else if (x == dateArray[mind])
                return mind;
        }
        return -1;
    }
}
</code></pre>
<p>}<br>
//递归快速排序<br>
/// <summary><br>
/// 递归快速排序<br>
/// </summary><br>
/// <param name="dateArray">数组</param><br>
/// <param name="left">0</param><br>
/// <param name="right">最大索引date.Length-1</param><br>
static void QuickSort(int[] dateArray,int left,int right)<br>
{<br>
if (left&lt;right )<br>
{<br>
int i = left;<br>
int j = right+1;<br>
int pivot = dateArray[i];</p>
<pre><code>            do
            {
                do i++; while (dateArray[i] &lt; pivot);
                do j--; while (dateArray[j] &gt; pivot);
                if (i &lt; j)
                {
                    swap(ref dateArray[i], ref dateArray[j]);
                }
            } while (i &lt; j);
            swap(ref dateArray[left], ref dateArray[j]);
            QuickSort(dateArray, left, j - 1);
            QuickSort(dateArray, j + 1, right);
        }
    }
</code></pre>
<p>Perm排列组合<br>
static void Perautations(char[] s,int k,int m)<br>
{<br>
if(k==m)<br>
{<br>
for (int i = 0; i &lt;= m; i++)<br>
{<br>
Console.Write(s[i]);<br>
}<br>
}<br>
else<br>
{<br>
for (int i = k; i &lt;= m; i++)<br>
{<br>
char temp = s[i];<br>
s[i] = s[k];<br>
s[k] = temp;<br>
Perautations(s, k + 1, m);<br>
char temp2 = s[i];<br>
s[i] = s[k];<br>
s[k] = temp2;<br>
}<br>
}<br>
}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Sort]]></title>
        <id>https://Wei715547.github.io/post/sort/</id>
        <link href="https://Wei715547.github.io/post/sort/">
        </link>
        <updated>2020-06-28T03:11:56.000Z</updated>
        <content type="html"><![CDATA[<p>直插排序<br>
<img src="https://Wei715547.github.io/post-images/1593314284836.jpg" alt="" loading="lazy"><br>
static void InsertSort(int[] dateArray)<br>
{<br>
for (int i = 1; i &lt; dateArray .Length ; i++)<br>
{<br>
int iValue = dateArray[i];<br>
bool isInsert = false;<br>
//从第二个元素开始拿到i位置元素，和前面的元素对比<br>
//如比I大，就让其向后移动，（保证前面的元素从小到大排序）<br>
for (int j = i - 1; j &gt;= 0; j--)<br>
{<br>
if (dateArray [j]&gt;iValue)<br>
{<br>
dateArray[j + 1] = dateArray[j];<br>
}else//在前面发现一比i小的值就停止移动<br>
{<br>
dateArray[j + 1] = iValue;<br>
isInsert = true;<br>
break;<br>
}<br>
}<br>
if (isInsert ==false)//前面的值都比i大将i放到最前面<br>
{<br>
dateArray[0] = iValue;<br>
}<br>
}<br>
}</p>
<pre><code>    冒泡排序
    static void BubbleSort(int[] dateArray)
    {
        for (int i = 0; i &lt; dateArray .Length-1 ; i++)//总循环次数
        {
            for (int j = 0; j &lt; dateArray.Length-1-i; j++)//循环n次后后n个数已经最大不需在进入比较
            {
                if (dateArray [j]&gt;dateArray [j+1])
                {
                    int temp = dateArray[j];
                    dateArray[j] = dateArray[j + 1];
                    dateArray[j + 1] = temp;
                }
            }
        }
    }
</code></pre>
<p><img src="https://Wei715547.github.io/post-images/1593315435960.jpg" alt="" loading="lazy"><br>
<img src="https://Wei715547.github.io/post-images/1593315539844.jpg" alt="" loading="lazy"><br>
选择排序<br>
static void SelectSort(int[] dateArray)<br>
{<br>
for (int i = 0; i &lt; dateArray .Length-1 ; i++)<br>
{<br>
int mindate = dateArray[i];<br>
int minIndex = i;<br>
for (int j = i+1; j &lt; dateArray.Length ; j++)<br>
{<br>
if (dateArray [j]&lt;mindate )<br>
{<br>
mindate = dateArray[j];<br>
minIndex = j;<br>
}<br>
}<br>
if (minIndex !=i)<br>
{<br>
int temp = dateArray[i];<br>
dateArray[i] = mindate;<br>
dateArray[minIndex] = temp;<br>
}<br>
}<br>
}</p>
<pre><code>    快速排序
    /// &lt;summary&gt;
    /// 对数组范围内的数据进行排序
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;dateArray&quot;&gt;要排序的数组&lt;/param&gt;
    /// &lt;param name=&quot;left&quot;&gt;开始索引&lt;/param&gt;
    /// &lt;param name=&quot;right&quot;&gt;结束索引&lt;/param&gt;
    static void QuickSort(int [] dateArray,int left,int right)
    {
        if (left &lt;right )
        {
            int x = dateArray[left];//基准数，把比它小或等于它的放在它左边，然后把比它大的放在右边
            int i = left;
            int j = right;

            while (true &amp;&amp; i &lt; j)
            {
                //从后往前比较，（从右往左找一个小于/等于x的数字）
                while (true &amp;&amp; i &lt; j)
                {
                    if (dateArray[j] &lt; x)//找到了一个小于基准数的数字，把它放在x左边（i位置）
                    {
                        dateArray[i] = dateArray[j];
                        break;
                    }
                    else
                    {
                        j--;
                    }
                }
                //从前往后找一个（左到右找一个比x大的数字，放在放在基准位置（j）
                while (true &amp;&amp; i &lt; j)
                {
                    if (dateArray[i] &gt; x)
                    {
                        dateArray[j] = dateArray[i];
                        break;
                    }
                    else
                    {
                        i++;
                    }
                }
            }
            dateArray[i] = x;
            QuickSort(dateArray, left, i - 1);
            QuickSort(dateArray, i + 1, right);
        }
    }</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[自定义String,Array]]></title>
        <id>https://Wei715547.github.io/post/zi-ding-yi-stringarray/</id>
        <link href="https://Wei715547.github.io/post/zi-ding-yi-stringarray/">
        </link>
        <updated>2020-06-28T01:53:18.000Z</updated>
        <content type="html"><![CDATA[<p>using System;<br>
using System.Collections.Generic;<br>
using System.Text;</p>
<p>namespace 串<br>
{<br>
class StringDS<br>
{<br>
private char[] date;<br>
public StringDS(char[] array )<br>
{<br>
date = new char[array.Length];<br>
for (int i = 0; i &lt; date.Length; i++)<br>
{<br>
date[i] = array[i];<br>
}<br>
}<br>
public StringDS(string str)<br>
{<br>
date = new char[str.Length];<br>
for (int i = 0; i &lt; date.Length; i++)<br>
{<br>
date[i] = str[i];<br>
}<br>
}</p>
<pre><code>    //索引器
    public char this[int index]
    {
        get { return date[index]; }
    }

    public int GetLength()
    {
        return date.Length;
    }

    /// &lt;summary&gt;
    /// 如果两字符相同返回0
    /// 如果当前字符小于s,返回-1
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;s&quot;&gt;&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public int Compare(StringDS s)
    {
        //取得长度较小的字符串长度
        int len = this.GetLength() &lt; s.GetLength() ? this.GetLength() : s.GetLength();
        int index = -1;
        for (int i = 0; i &lt; len; i++)
        {
            if (this[i]!=s[i])
            {
                index = i;
                break;
            }
        }
        if(index !=-1)
        {
            if (this[index ] &gt; s[index ])
                return 1;
            else
                return -1;
        }else
        {
            if (this.GetLength()==s.GetLength ())
            {
                return 0;
            }else
            {
                if (this.GetLength() &gt; s.GetLength())
                    return 1;
                else
                    return -1;
            }
        }
    }
    /// &lt;summary&gt;
    /// 截取字符串
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;index&quot;&gt;&lt;/param&gt;
    /// &lt;param name=&quot;length&quot;&gt;&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public StringDS SubString(int index,int length)
    {
        char[] newDate = new char[length];
        for (int i = 0; i &lt; length; i++)
        {
            newDate[i] = date[i+index ];
        }
        return new StringDS ( newDate);
    }
    public override string ToString()
    {
        /*string s=&quot;&quot;;
        foreach (char  item in date)
        {
            s += item;
        }
        return s;*/
        return new string(date);
        
    }
    public static StringDS Concat(StringDS a,StringDS b)
    {
        char [] newDate = new char[a.GetLength() + b.GetLength()];
        for (int i = 0; i &lt; a.GetLength (); i++)
        {
            newDate[i] = a[i];
        }
        for (int i = a.GetLength (); i &lt; newDate .Length; i++)
        {
            newDate[i] = b[i - a.GetLength()];
        }
        return new StringDS(newDate);
    }

    public int IndexOf(StringDS str)
    {
        for (int i = 0; i &lt;= this .GetLength ()-str .GetLength (); i++)
        {
            bool isEqual = true;
            for (int j = i; j &lt; i+str.GetLength (); j++)
            {
                if (this [j]!=str [j-i])
                {
                    isEqual = false;
                }
            }
            if (isEqual )
            {
                return i;
            }else
            {
                continue;
            }
        }
        return -1;
    }
}
</code></pre>
<p>}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Attribute]]></title>
        <id>https://Wei715547.github.io/post/attribute/</id>
        <link href="https://Wei715547.github.io/post/attribute/">
        </link>
        <updated>2020-06-27T04:19:31.000Z</updated>
        <content type="html"><![CDATA[<p>默认情况下，Inspector窗口会显示所有的公共字段，Attribute可以叠加发生作用<br>
1.HideInInspector：隐藏字段<br>
2.SerializeFiled：把私有字段在Inspector中显示<br>
3.Header：对公共字段进行分组 （【Header（&quot;描述&quot;）】）<br>
4.Space：给各个字段分组之间添加一个空行<br>
5.Textarea：可以在输入框内输出多行，超出范围会出现滚动条<br>
6.Range：给字段定数值范围，以滑动条的形式呈现 （【Range（0,1）】）<br>
7.Tooltip：为字段添加提示信息，鼠标悬停字段处即可出现<br>
8.ContextMenu：为方法提供可执行方式，在Inspector窗口右键点击脚本即可看到方法<br>
9.DisallowMultipleComponent：指定脚本不能重复添加<br>
10.RequireComponent：在一个类中绑定另一个类，实现同步</p>
]]></content>
    </entry>
</feed>